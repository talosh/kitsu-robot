{
  "Classes": [ 
    {
      "Name": "Application",
      "Desc": null,
      "Signals": [ 
        "SigSceneOpen", 
        "SigSceneClosed", 
        "PlayModeChanged"
      ],
      "Methods": [ 
        {
          "Name": "get_application_info",
          "Desc": "Information describing the application exposed via the FilmLight API",
          "Static": 1,
          "Args": {

          },
          "Result": {
            "Type": "struct",
            "Desc": "Application Info"
          }
        }, 
        {
          "Name": "get_connections_info",
          "Desc": "Get array of current connections. Each entry in the array will be a ConnectionInfo object describing that connection.",
          "Static": 1,
          "Args": {

          },
          "Result": {
            "Type": "array",
            "Desc": "Array of connection info objects"
          }
        }, 
        {
          "Name": "get_video_streaming_supported",
          "Desc": "Is video streaming supported (hardware, setup & licensed)",
          "Static": 1,
          "Args": {

          },
          "Result": {
            "Type": "int",
            "Desc": "1 if streaming supported, 0 if not"
          }
        }, 
        {
          "Name": "get_video_streaming_enabled",
          "Desc": "Is video streaming currently enabled",
          "Static": 1,
          "Args": {

          },
          "Result": {
            "Type": "int",
            "Desc": "1 if streaming enabled, 0 if not"
          }
        }, 
        {
          "Name": "get_video_stream_address",
          "Desc": "Return address for video stream",
          "Static": 1,
          "Args": [ 
            {
              "Name": "context",
              "Type": "context",
              "Desc": null,
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "string",
            "Desc": "Address for video stream access. Used by Client View."
          }
        }, 
        {
          "Name": "is_playing",
          "Desc": "Is playback currently in progress",
          "Static": 1,
          "Args": {

          },
          "Result": {
            "Type": "int",
            "Desc": "1 if playback in progress, 0 if not"
          }
        }
      ],
      "URIs": null
    }, 
    {
      "Name": "ClientViewManager",
      "Desc": null,
      "Signals": [ 
        "SigStreamConfigsChanged", 
        "SigConnectedClientConfigsChanged", 
        "SigSessionClientConfigsChanged", 
        "SigCurrentSessionChanged", 
        "SigSessionPropertyChanged", 
        "SigClientViewEnabledChanged", 
        "SigStreamingEnabledChanged", 
        "SigStreamResListChanged", 
        "ClientConfigsChanged", 
        "StreamConfigsChangedStart", 
        "StreamConfigsChangedEnd", 
        "PerformSimAdAction"
      ],
      "Methods": [ 
        {
          "Name": "get",
          "Desc": "Get reference to the (singleton) ClientViewManager object",
          "Static": 1,
          "Args": {

          },
          "Result": {
            "Type": "ClientViewManager",
            "Desc": ""
          }
        }, 
        {
          "Name": "get_client_settings",
          "Desc": "Get the connected Client View's config/settings object.",
          "Static": null,
          "Args": [ 
            {
              "Name": "client",
              "Type": "context",
              "Desc": null,
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "ClientViewClientSettings",
            "Desc": ""
          }
        }, 
        {
          "Name": "get_stream_settings",
          "Desc": "Get array of stream settings objects.",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "array",
            "Desc": ""
          }
        }, 
        {
          "Name": "get_streaming_enabled",
          "Desc": "Is streaming currently enabled.",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "int",
            "Desc": "1 if streaming enabled, otherwise 0"
          }
        }, 
        {
          "Name": "get_session_name",
          "Desc": "Get the current Client View session name.",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "string",
            "Desc": "Current session name"
          }
        }, 
        {
          "Name": "get_session_clients",
          "Desc": "Get array of current session clients. Each entry in the array will be a ConnectionInfo object describing that connection.",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "array",
            "Desc": "Array of current session clients"
          }
        }
      ],
      "URIs": null
    }, 
    {
      "Name": "CurrentGrade",
      "Desc": null,
      "Signals": [ 
        "UpdateCurrentShot"
      ],
      "Methods": [ 
        {
          "Name": "get",
          "Desc": "Get (singleton) current grade interface for the connected client",
          "Static": 1,
          "Args": [ 
            {
              "Name": "client",
              "Type": "context",
              "Desc": null,
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "CurrentGrade",
            "Desc": "CurrentGrade object"
          }
        }, 
        {
          "Name": "request_update_current_shot_signal",
          "Desc": "Explicitly request an 'UpdateCurrentShot' signal. This can be useful, for example, when first connecting to the current grade module for initialising a client's internal state.",
          "Static": null,
          "Args": null,
          "Result": null
        }, 
        {
          "Name": "get_current_cursor",
          "Desc": "Get an interface to the cursor currently in use by Baselight for grading.",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "Cursor",
            "Desc": "Current cursor interface"
          }
        }, 
        {
          "Name": "is_enabled",
          "Desc": "Is this interface currently enabled. Note: The current grade interface may be arbitrarily enabled/disabled from the host application itself.",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "int",
            "Desc": "Flag indicating whether the interface is currently enabled"
          }
        }
      ],
      "URIs": null
    }, 
    {
      "Name": "Cursor",
      "Desc": null,
      "Signals": [ 
        
      ],
      "Methods": [ 
        {
          "Name": "get_time",
          "Desc": "Get cursor's position in the timeline in seconds",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "float",
            "Desc": "Timeline time"
          }
        }, 
        {
          "Name": "get_frame",
          "Desc": "Get cursor's position in the timeline as a frame number",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "int",
            "Desc": "Timeline frame number"
          }
        }, 
        {
          "Name": "get_record_timecode",
          "Desc": "Get cursor's position in the timeline as a timecode",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "timecode",
            "Desc": "Record timecode"
          }
        }, 
        {
          "Name": "get_viewing_format_name",
          "Desc": "Get the name of the cursor's current viewing format.",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "string",
            "Desc": "Viewing format name"
          }
        }, 
        {
          "Name": "get_viewing_format_dims",
          "Desc": "Get basic geometry (width, height and aspect ratio) of the cursor's current viewing format",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "struct",
            "Desc": "Viewing format dimensions"
          }
        }, 
        {
          "Name": "get_viewing_format_mask_name",
          "Desc": "Get current viewing format mask name",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "FormatMask",
            "Desc": ""
          }
        }, 
        {
          "Name": "get_viewing_format_mask",
          "Desc": "Get current viewing format mask rectangle",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "FormatMask",
            "Desc": ""
          }
        }, 
        {
          "Name": "get_age",
          "Desc": "Get the cursor's 'age'. The age is an integer, incremented whenever an attribute which could result in a visual change to the image display has been modfied.",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "int",
            "Desc": "Cursor age value"
          }
        }, 
        {
          "Name": "is_using_truelight",
          "Desc": "Is Truelight currently in use (ie. a profile has been selected & Truelight is enabled) in this cursor.",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "int",
            "Desc": "Flag indicating if Truelight is in use"
          }
        }
      ],
      "URIs": null
    }, 
    {
      "Name": "Export",
      "Desc": null,
      "Signals": [ 
        "ExportProgress"
      ],
      "Methods": [ 
        {
          "Name": "create",
          "Desc": "Create a new Export operation object",
          "Static": 1,
          "Args": [ 
            {
              "Name": "client",
              "Type": "context",
              "Desc": null,
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "Export",
            "Desc": "Export object"
          }
        }, 
        {
          "Name": "select_all",
          "Desc": "Select all snots in Scene to export",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "clear_selection",
          "Desc": "Clear selection of shots in Scene to export",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "select_shots",
          "Desc": "Set the selection to the given Shots for rendering",
          "Static": null,
          "Args": [ 
            {
              "Name": "shots",
              "Type": "array",
              "Desc": "Array of Shot objects to select",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "select_shot",
          "Desc": "Add the given shot to the selection to be exported.",
          "Static": null,
          "Args": [ 
            {
              "Name": "shot",
              "Type": "array",
              "Desc": "Shot to add to selection",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "do_export_BLG",
          "Desc": "Perform export BLG operation using the given Export settings",
          "Static": null,
          "Args": [ 
            {
              "Name": "context",
              "Type": "context",
              "Desc": null,
              "Nullable": 0
            }, 
            {
              "Name": "queue",
              "Type": "QueueManager",
              "Desc": "QueueManager object for machine running render queue",
              "Nullable": 0
            }, 
            {
              "Name": "scene",
              "Type": "Scene",
              "Desc": "Target scene to Export From",
              "Nullable": 0
            }, 
            {
              "Name": "settings",
              "Type": "BLGExportSettings",
              "Desc": "",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "ExportOpInfo",
            "Desc": "Operation info for job added to export queue"
          }
        }, 
        {
          "Name": "do_export_CDL",
          "Desc": "Perform export CDL operation using the given Export settings",
          "Static": null,
          "Args": [ 
            {
              "Name": "context",
              "Type": "context",
              "Desc": null,
              "Nullable": 0
            }, 
            {
              "Name": "queue",
              "Type": "QueueManager",
              "Desc": "QueueManager object for machine running render queue",
              "Nullable": 0
            }, 
            {
              "Name": "scene",
              "Type": "Scene",
              "Desc": "Target scene to Export From",
              "Nullable": 0
            }, 
            {
              "Name": "settings",
              "Type": "CDLExportSettings",
              "Desc": "",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "ExportOpInfo",
            "Desc": "Operation info for job added to export queue"
          }
        }, 
        {
          "Name": "do_export_cube",
          "Desc": "Perform export LUT operation using the given Export settings",
          "Static": null,
          "Args": [ 
            {
              "Name": "context",
              "Type": "context",
              "Desc": null,
              "Nullable": 0
            }, 
            {
              "Name": "queue",
              "Type": "QueueManager",
              "Desc": "QueueManager object for machine running render queue",
              "Nullable": 0
            }, 
            {
              "Name": "scene",
              "Type": "Scene",
              "Desc": "Target scene to Export From",
              "Nullable": 0
            }, 
            {
              "Name": "settings",
              "Type": "CubeExportSettings",
              "Desc": "",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "ExportOpInfo",
            "Desc": "Operation info for job added to export queue"
          }
        }, 
        {
          "Name": "do_export_still",
          "Desc": "Perform export still operation using the given Export settings",
          "Static": null,
          "Args": [ 
            {
              "Name": "context",
              "Type": "context",
              "Desc": null,
              "Nullable": 0
            }, 
            {
              "Name": "queue",
              "Type": "QueueManager",
              "Desc": "QueueManager object for machine running render queue",
              "Nullable": 0
            }, 
            {
              "Name": "scene",
              "Type": "Scene",
              "Desc": "Target scene to Export From",
              "Nullable": 0
            }, 
            {
              "Name": "settings",
              "Type": "StillExportSettings",
              "Desc": "",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "ExportOpInfo",
            "Desc": "Operation info for job added to export queue"
          }
        }, 
        {
          "Name": "get_log",
          "Desc": "Return log of progress information",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "array",
            "Desc": "Array of Export progress information"
          }
        }
      ],
      "URIs": null
    }, 
    {
      "Name": "Format",
      "Desc": null,
      "Signals": [ 
        
      ],
      "Methods": [ 
        {
          "Name": "get_description",
          "Desc": "Return description of format",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "string",
            "Desc": "Description"
          }
        }, 
        {
          "Name": "get_resolution",
          "Desc": "Return FormatInfo for given resolution of Format",
          "Static": null,
          "Args": [ 
            {
              "Name": "res",
              "Type": "string",
              "Desc": "Constant identify which resolution to fetch",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "FormatInfo",
            "Desc": ""
          }
        }, 
        {
          "Name": "get_mapping_names",
          "Desc": "Return names of mapping from this format to other formats",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "array",
            "Desc": "Array of names of format mapping"
          }
        }, 
        {
          "Name": "get_mapping",
          "Desc": "Return definition of mapping from this format to named format",
          "Static": null,
          "Args": [ 
            {
              "Name": "name",
              "Type": "string",
              "Desc": "Name of target format",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "FormatMapping",
            "Desc": ""
          }
        }, 
        {
          "Name": "get_masks",
          "Desc": "Return array of FormatMasks defined for this format",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "array",
            "Desc": "Array of masks"
          }
        }, 
        {
          "Name": "get_burnin_names",
          "Desc": "Return array of names of burnins defined for this format",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "array",
            "Desc": "Array of burnin names"
          }
        }, 
        {
          "Name": "add_burnin",
          "Desc": "Create a new burnin with the given name, and return a FormatBurnin object for it",
          "Static": null,
          "Args": [ 
            {
              "Name": "name",
              "Type": "string",
              "Desc": "Burnin name",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "FormatBurnin",
            "Desc": ""
          }
        }, 
        {
          "Name": "get_burnin",
          "Desc": "Return FormatBurnin object for the named burnin",
          "Static": null,
          "Args": [ 
            {
              "Name": "name",
              "Type": "string",
              "Desc": "Burnin name",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "FormatBurnin",
            "Desc": ""
          }
        }, 
        {
          "Name": "delete_burnin",
          "Desc": "Delete the burnin with the given name",
          "Static": null,
          "Args": [ 
            {
              "Name": "name",
              "Type": "string",
              "Desc": "Burnin name",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }
      ],
      "URIs": null
    }, 
    {
      "Name": "FormatBurnin",
      "Desc": null,
      "Signals": [ 
        
      ],
      "Methods": [ 
        {
          "Name": "get_opacity",
          "Desc": "Get burnin opacity",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "float",
            "Desc": "Opacity"
          }
        }, 
        {
          "Name": "set_opacity",
          "Desc": "Set burnin opacity",
          "Static": null,
          "Args": [ 
            {
              "Name": "opacity",
              "Type": "float",
              "Desc": "Opacity",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "get_box_colour",
          "Desc": "Set colour of box around text items",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "array",
            "Desc": "RGBA box colour"
          }
        }, 
        {
          "Name": "set_box_colour",
          "Desc": "Set colour of box around text items",
          "Static": null,
          "Args": [ 
            {
              "Name": "colour",
              "Type": "array",
              "Desc": "RGBA box colour",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "get_font",
          "Desc": "Get font name for this burnin",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "string",
            "Desc": "Font name"
          }
        }, 
        {
          "Name": "set_font",
          "Desc": "Get font name for this burnin",
          "Static": null,
          "Args": [ 
            {
              "Name": "name",
              "Type": "string",
              "Desc": "Font name",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "add_item",
          "Desc": "Add new item to the burnin",
          "Static": null,
          "Args": [ 
            {
              "Name": "item",
              "Type": "FormatBurninItem",
              "Desc": "",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "get_num_items",
          "Desc": "Return number of items defined within this burnin",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "int",
            "Desc": "Number of burnin items"
          }
        }, 
        {
          "Name": "get_item",
          "Desc": "Return definition for the burnin item at the given index",
          "Static": null,
          "Args": [ 
            {
              "Name": "index",
              "Type": "int",
              "Desc": "Index of burnin item",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "FormatBurninItem",
            "Desc": ""
          }
        }, 
        {
          "Name": "set_item",
          "Desc": "Return definition for the burnin item at the given index",
          "Static": null,
          "Args": [ 
            {
              "Name": "index",
              "Type": "int",
              "Desc": "Index of burnin item",
              "Nullable": 0
            }, 
            {
              "Name": "item",
              "Type": "FormatBurninItem",
              "Desc": "",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "delete_item",
          "Desc": "Delete the burnin item at the given index",
          "Static": null,
          "Args": [ 
            {
              "Name": "index",
              "Type": "int",
              "Desc": "Index of burnin item",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }
      ],
      "URIs": null
    }, 
    {
      "Name": "FormatSet",
      "Desc": null,
      "Signals": [ 
        
      ],
      "Methods": [ 
        {
          "Name": "factory_formats",
          "Desc": "Return factory FormatSet object for factory (built-in) formats",
          "Static": 1,
          "Args": {

          },
          "Result": {
            "Type": "FormatSet",
            "Desc": ""
          }
        }, 
        {
          "Name": "global_formats",
          "Desc": "Return global FormatSet object for formats defined in formats database",
          "Static": 1,
          "Args": {

          },
          "Result": {
            "Type": "FormatSet",
            "Desc": ""
          }
        }, 
        {
          "Name": "job_formats",
          "Desc": "Return FormatSet object for formats defined in the given Job database",
          "Static": 1,
          "Args": [ 
            {
              "Name": "hostname",
              "Type": "string",
              "Desc": "Database host",
              "Nullable": 0
            }, 
            {
              "Name": "jobname",
              "Type": "string",
              "Desc": "Job name",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "FormatSet",
            "Desc": ""
          }
        }, 
        {
          "Name": "get_drt_names",
          "Desc": "Return array of Display Rendering Transform names",
          "Static": 1,
          "Args": {

          },
          "Result": {
            "Type": "array",
            "Desc": "Array of DRT names"
          }
        }, 
        {
          "Name": "get_drt_info",
          "Desc": "Return information for the given Display Rendering Transform name",
          "Static": 1,
          "Args": [ 
            {
              "Name": "name",
              "Type": "string",
              "Desc": "Name of Display Rendering Transform",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "DRTInfo",
            "Desc": ""
          }
        }, 
        {
          "Name": "get_scope",
          "Desc": "Return scope this is FormatSet represents",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "string",
            "Desc": null
          }
        }, 
        {
          "Name": "get_scope_path",
          "Desc": "Return the path for FormatSets representing a job/scene scope",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "string",
            "Desc": "Scope path"
          }
        }, 
        {
          "Name": "get_format_names",
          "Desc": "Return array of format names",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "array",
            "Desc": "Format names"
          }
        }, 
        {
          "Name": "get_basic_format_name",
          "Desc": "Return name for a basic (auto-generated) format ",
          "Static": null,
          "Args": [ 
            {
              "Name": "width",
              "Type": "int",
              "Desc": "Width of format",
              "Nullable": 0
            }, 
            {
              "Name": "height",
              "Type": "int",
              "Desc": "Height of format",
              "Nullable": 0
            }, 
            {
              "Name": "pixelAspectRatio",
              "Type": "float",
              "Desc": "Pixel aspect ratio",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "string",
            "Desc": "Format name"
          }
        }, 
        {
          "Name": "get_format",
          "Desc": "Return Format object for the named format",
          "Static": null,
          "Args": [ 
            {
              "Name": "name",
              "Type": "string",
              "Desc": "Format name",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "Format",
            "Desc": ""
          }
        }, 
        {
          "Name": "get_colour_space_names",
          "Desc": "Return array of colour space names",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "array",
            "Desc": "Array of colour space names"
          }
        }, 
        {
          "Name": "get_colour_space_info",
          "Desc": "Return information on the given colour space",
          "Static": null,
          "Args": [ 
            {
              "Name": "name",
              "Type": "string",
              "Desc": "Name of colour space",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "ColourSpaceInfo",
            "Desc": ""
          }
        }, 
        {
          "Name": "add_format",
          "Desc": "Add a new format to this FormatSet",
          "Static": null,
          "Args": [ 
            {
              "Name": "name",
              "Type": "string",
              "Desc": "Name of format",
              "Nullable": 0
            }, 
            {
              "Name": "description",
              "Type": "string",
              "Desc": "Description of format",
              "Nullable": 0
            }, 
            {
              "Name": "width",
              "Type": "int",
              "Desc": "Width of format in pixels",
              "Nullable": 0
            }, 
            {
              "Name": "height",
              "Type": "int",
              "Desc": "Height of format in pixels",
              "Nullable": 0
            }, 
            {
              "Name": "pixelAspectRatio",
              "Type": "float",
              "Desc": "Pixel aspect ratio",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "Format",
            "Desc": "Object representing the newly created format"
          }
        }, 
        {
          "Name": "delete_format",
          "Desc": "Delete a format from the FormatSet",
          "Static": null,
          "Args": [ 
            {
              "Name": "name",
              "Type": "string",
              "Desc": "Name of format to delete",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }
      ],
      "URIs": null
    }, 
    {
      "Name": "Image",
      "Desc": null,
      "Signals": [ 
        
      ],
      "Methods": [ 
        {
          "Name": "get_raw_metadata",
          "Desc": "Returns raw metadata for the image or movie at the supplied path",
          "Static": 1,
          "Args": [ 
            {
              "Name": "filename",
              "Type": "string",
              "Desc": "Filename of image/movie to examine",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "struct",
            "Desc": "Dictionary of metadata"
          }
        }
      ],
      "URIs": null
    }, 
    {
      "Name": "JobManager",
      "Desc": null,
      "Signals": [ 
        
      ],
      "Methods": [ 
        {
          "Name": "get_jobs",
          "Desc": "Fetch list of jobs in job database",
          "Static": 1,
          "Args": [ 
            {
              "Name": "host",
              "Type": "string",
              "Desc": "Hostname of job database",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "array",
            "Desc": "Array of job name strings"
          }
        }, 
        {
          "Name": "get_folders",
          "Desc": "Fetch list of folder names within job/folder in job database",
          "Static": 1,
          "Args": [ 
            {
              "Name": "host",
              "Type": "string",
              "Desc": "Hostname of job database",
              "Nullable": 0
            }, 
            {
              "Name": "job",
              "Type": "string",
              "Desc": "Job name within job database",
              "Nullable": 0
            }, 
            {
              "Name": "folder",
              "Type": "string",
              "Desc": "Folder within job",
              "Nullable": 1
            }, 
            {
              "Name": "recursive",
              "Type": "int",
              "Desc": "Return all folders contained within the given job/folder",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "array",
            "Desc": "Array of folder names"
          }
        }, 
        {
          "Name": "get_scenes",
          "Desc": "Fetch list of scene names within job/folder in job database",
          "Static": 1,
          "Args": [ 
            {
              "Name": "host",
              "Type": "string",
              "Desc": "Hostname of job database",
              "Nullable": 0
            }, 
            {
              "Name": "job",
              "Type": "string",
              "Desc": "Job name within job database",
              "Nullable": 0
            }, 
            {
              "Name": "folder",
              "Type": "string",
              "Desc": "Folder within job",
              "Nullable": 1
            }
          ],
          "Result": {
            "Type": "array",
            "Desc": "Array of scene names"
          }
        }, 
        {
          "Name": "create_job",
          "Desc": "Create a new job",
          "Static": 1,
          "Args": [ 
            {
              "Name": "host",
              "Type": "string",
              "Desc": "Hostname of job database",
              "Nullable": 0
            }, 
            {
              "Name": "jobname",
              "Type": "string",
              "Desc": "Job name",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "rename_job",
          "Desc": "Rename job",
          "Static": 1,
          "Args": [ 
            {
              "Name": "host",
              "Type": "string",
              "Desc": "Hostname of job database",
              "Nullable": 0
            }, 
            {
              "Name": "jobname",
              "Type": "string",
              "Desc": "Job name",
              "Nullable": 0
            }, 
            {
              "Name": "new_jobname",
              "Type": "string",
              "Desc": "New job name",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "delete_job",
          "Desc": "Delete job",
          "Static": 1,
          "Args": [ 
            {
              "Name": "host",
              "Type": "string",
              "Desc": "Hostname of job database",
              "Nullable": 0
            }, 
            {
              "Name": "jobname",
              "Type": "string",
              "Desc": "Job name",
              "Nullable": 0
            }, 
            {
              "Name": "force",
              "Type": "int",
              "Desc": "Force deletion of job",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "job_exists",
          "Desc": "Check if job exists",
          "Static": 1,
          "Args": [ 
            {
              "Name": "host",
              "Type": "string",
              "Desc": "Hostname of job database",
              "Nullable": 0
            }, 
            {
              "Name": "jobname",
              "Type": "string",
              "Desc": "Job name",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "int",
            "Desc": "Flag indicating whether job exists"
          }
        }, 
        {
          "Name": "create_folder",
          "Desc": "Create a folder within job",
          "Static": 1,
          "Args": [ 
            {
              "Name": "host",
              "Type": "string",
              "Desc": "Hostname of job database",
              "Nullable": 0
            }, 
            {
              "Name": "jobname",
              "Type": "string",
              "Desc": "Job name",
              "Nullable": 0
            }, 
            {
              "Name": "foldername",
              "Type": "string",
              "Desc": "Folder name within job",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "rename_folder",
          "Desc": "Rename folder",
          "Static": 1,
          "Args": [ 
            {
              "Name": "host",
              "Type": "string",
              "Desc": "Hostname of job database",
              "Nullable": 0
            }, 
            {
              "Name": "jobname",
              "Type": "string",
              "Desc": "Job name",
              "Nullable": 0
            }, 
            {
              "Name": "foldername",
              "Type": "string",
              "Desc": "Folder name within job",
              "Nullable": 0
            }, 
            {
              "Name": "new_foldername",
              "Type": "string",
              "Desc": "New folder name",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "delete_folder",
          "Desc": "Delete folder",
          "Static": 1,
          "Args": [ 
            {
              "Name": "host",
              "Type": "string",
              "Desc": "Hostname of job database",
              "Nullable": 0
            }, 
            {
              "Name": "jobname",
              "Type": "string",
              "Desc": "Job name",
              "Nullable": 0
            }, 
            {
              "Name": "foldername",
              "Type": "string",
              "Desc": "Folder name within job",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "get_scene_info",
          "Desc": "Return information about scene",
          "Static": 1,
          "Args": [ 
            {
              "Name": "host",
              "Type": "string",
              "Desc": "Hostname of job database",
              "Nullable": 0
            }, 
            {
              "Name": "jobname",
              "Type": "string",
              "Desc": "Job name",
              "Nullable": 0
            }, 
            {
              "Name": "scenename",
              "Type": "string",
              "Desc": "Scene name",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "SceneInfo",
            "Desc": "An object containing properties of the Scene"
          }
        }, 
        {
          "Name": "scene_exists",
          "Desc": "Check if scene exists",
          "Static": 1,
          "Args": [ 
            {
              "Name": "host",
              "Type": "string",
              "Desc": "Hostname of job database",
              "Nullable": 0
            }, 
            {
              "Name": "jobname",
              "Type": "string",
              "Desc": "Job name",
              "Nullable": 0
            }, 
            {
              "Name": "scenename",
              "Type": "string",
              "Desc": "Scene name",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "int",
            "Desc": "Flag indicating whether scene exists"
          }
        }, 
        {
          "Name": "delete_scene",
          "Desc": "Delete scene",
          "Static": 1,
          "Args": [ 
            {
              "Name": "host",
              "Type": "string",
              "Desc": "Hostname of job database",
              "Nullable": 0
            }, 
            {
              "Name": "jobname",
              "Type": "string",
              "Desc": "Job name",
              "Nullable": 0
            }, 
            {
              "Name": "scenename",
              "Type": "string",
              "Desc": "Scene name",
              "Nullable": 0
            }, 
            {
              "Name": "ignoreLocks",
              "Type": "int",
              "Desc": "Flag indicating any existing locks on scene should be ignored",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "rename_scene",
          "Desc": "Rename scene",
          "Static": 1,
          "Args": [ 
            {
              "Name": "host",
              "Type": "string",
              "Desc": "Hostname of job database",
              "Nullable": 0
            }, 
            {
              "Name": "jobname",
              "Type": "string",
              "Desc": "Job name",
              "Nullable": 0
            }, 
            {
              "Name": "scenename",
              "Type": "string",
              "Desc": "Scene name",
              "Nullable": 0
            }, 
            {
              "Name": "newname",
              "Type": "string",
              "Desc": "New Scene name",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }
      ],
      "URIs": null
    }, 
    {
      "Name": "Licence",
      "Desc": null,
      "Signals": [ 
        
      ],
      "Methods": [ 
        {
          "Name": "get_system_id",
          "Desc": "Return the system ID used to identify this system for licensing",
          "Static": 1,
          "Args": {

          },
          "Result": {
            "Type": "string",
            "Desc": "System ID string"
          }
        }, 
        {
          "Name": "get_licence_info",
          "Desc": "Return licence information",
          "Static": 1,
          "Args": [ 
            {
              "Name": "include_expired",
              "Type": "int",
              "Desc": "Flag indicating whether to include expired licenses in the list",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "array",
            "Desc": "Array of installed licence items"
          }
        }, 
        {
          "Name": "install_licence",
          "Desc": "Install the given licence data",
          "Static": 1,
          "Args": [ 
            {
              "Name": "licenceData",
              "Type": "string",
              "Desc": "String containing Base-64 encoded licence data",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }
      ],
      "URIs": null
    }, 
    {
      "Name": "Mark",
      "Desc": null,
      "Signals": [ 
        
      ],
      "Methods": [ 
        {
          "Name": "get_id",
          "Desc": "Return Mark object ID",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "int",
            "Desc": "Mark ID"
          }
        }, 
        {
          "Name": "get_type",
          "Desc": "Return Mark type",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "string",
            "Desc": "Value indicating type of mark"
          }
        }, 
        {
          "Name": "get_position",
          "Desc": "Return Mark position For Shot marks, this value is a frame number relative to the start of the image sequence. For Strip marks, this value is a time in seconds relative to the start of the strip. For Timeline marks, this value is a time in seconds relative to the start of the timeline. ",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "float",
            "Desc": "Position in seconds or frames"
          }
        }, 
        {
          "Name": "get_time",
          "Desc": "Return Mark position in seconds For Shot and Strip marks, this returns the time relative to the start of the shot For Timeline marks, this returns the time relative to the start of the timeline ",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "float",
            "Desc": "Position in seconds"
          }
        }, 
        {
          "Name": "get_note_text",
          "Desc": "Return Mark note text",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "string",
            "Desc": "Note text"
          }
        }, 
        {
          "Name": "get_colour",
          "Desc": "Return Mark colour",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "array",
            "Desc": "RGBA colour"
          }
        }, 
        {
          "Name": "get_category",
          "Desc": "Return Mark category",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "string",
            "Desc": "Mark category"
          }
        }, 
        {
          "Name": "get_source_frame",
          "Desc": "Return the source image frame number for this mark Only applicable for Shot/Strip marks. Will fail for Timeline marks ",
          "Static": null,
          "Args": [ 
            {
              "Name": "eye",
              "Type": "string",
              "Desc": "Which eye for stereo sequences",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "int",
            "Desc": "Source frame number"
          }
        }, 
        {
          "Name": "get_source_timecode",
          "Desc": "Return the source image timecode for this mark Only applicable for Shot/Strip marks. Will fail for Timeline marks ",
          "Static": null,
          "Args": [ 
            {
              "Name": "eye",
              "Type": "string",
              "Desc": "Which eye for stereo sequences",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "timecode",
            "Desc": "Source timecode"
          }
        }, 
        {
          "Name": "get_record_frame",
          "Desc": "Return the source image frame number for this mark ",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "int",
            "Desc": "Record frame number"
          }
        }, 
        {
          "Name": "get_record_timecode",
          "Desc": "Return the source image timecode for this mark ",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "timecode",
            "Desc": "Record timecode"
          }
        }
      ],
      "URIs": null
    }, 
    {
      "Name": "MultiPaste",
      "Desc": null,
      "Signals": [ 
        "MultiPasteProgress"
      ],
      "Methods": [ 
        {
          "Name": "create",
          "Desc": "Create a new Multi-Paste operation object",
          "Static": 1,
          "Args": [ 
            {
              "Name": "client",
              "Type": "context",
              "Desc": null,
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "MultiPaste",
            "Desc": "MultiPaste object"
          }
        }, 
        {
          "Name": "multi_paste",
          "Desc": "Perform multi-paste operation using the given Multi-Paste settings",
          "Static": null,
          "Args": [ 
            {
              "Name": "scene",
              "Type": "Scene",
              "Desc": "Target scene to MultiPaste into",
              "Nullable": 0
            }, 
            {
              "Name": "settings",
              "Type": "MultiPasteSettings",
              "Desc": "",
              "Nullable": 0
            }, 
            {
              "Name": "shot_ids",
              "Type": "array",
              "Desc": "Array of Shot IDs to apply multi-paste operation to",
              "Nullable": 1
            }
          ],
          "Result": {
            "Type": "int",
            "Desc": "Number of shots updated by Multi-Paste operation"
          }
        }, 
        {
          "Name": "get_log",
          "Desc": "Return log of progress information",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "array",
            "Desc": "Array of multi-paste progress information"
          }
        }
      ],
      "URIs": null
    }, 
    {
      "Name": "QueueManager",
      "Desc": null,
      "Signals": [ 
        "QueueOpsChanged", 
        "QueueOpStatusChanged", 
        "QueueOpLogChanged"
      ],
      "Methods": [ 
        {
          "Name": "create",
          "Desc": "Create a QueueManager object to examine and manipulate the queue on the given zone",
          "Static": 1,
          "Args": [ 
            {
              "Name": "zone",
              "Type": "string",
              "Desc": "Zone name of machine running queue",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "QueueManager",
            "Desc": ""
          }
        }, 
        {
          "Name": "create_local",
          "Desc": "Create a QueueManager object to examine and manipulate the queue on the local zone",
          "Static": 1,
          "Args": {

          },
          "Result": {
            "Type": "QueueManager",
            "Desc": ""
          }
        }, 
        {
          "Name": "create_no_database",
          "Desc": "Create a QueueManager object to examine and manipulate a non-database queue in the FLAPI process. In addition, the QueueManager object will process any operations added to the queue within the FLAPI process.",
          "Static": 1,
          "Args": {

          },
          "Result": {
            "Type": "QueueManager",
            "Desc": ""
          }
        }, 
        {
          "Name": "get_queue_zones",
          "Desc": "Return list of available zones running queue services",
          "Static": 1,
          "Args": {

          },
          "Result": {
            "Type": "array",
            "Desc": "Array of strings identifying zones available for rendering"
          }
        }, 
        {
          "Name": "get_operation_ids",
          "Desc": "Return list operation IDs in queue",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "array",
            "Desc": "Array of Operation IDs"
          }
        }, 
        {
          "Name": "get_operation",
          "Desc": "Return definition of given operation ID",
          "Static": null,
          "Args": [ 
            {
              "Name": "id",
              "Type": "int",
              "Desc": "Operation ID",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "QueueOp",
            "Desc": ""
          }
        }, 
        {
          "Name": "get_operation_status",
          "Desc": "Return status of given operation ID",
          "Static": null,
          "Args": [ 
            {
              "Name": "id",
              "Type": "int",
              "Desc": "Operation ID",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "QueueOpStatus",
            "Desc": ""
          }
        }, 
        {
          "Name": "get_operation_log",
          "Desc": "Return log for given operation ID",
          "Static": null,
          "Args": [ 
            {
              "Name": "id",
              "Type": "int",
              "Desc": "Operation ID",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "array",
            "Desc": "Array of Log Entries"
          }
        }, 
        {
          "Name": "pause_operation",
          "Desc": "Pause operation with given operation ID",
          "Static": null,
          "Args": [ 
            {
              "Name": "id",
              "Type": "int",
              "Desc": "Operation ID",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "resume_operation",
          "Desc": "Resume operation with given operation ID",
          "Static": null,
          "Args": [ 
            {
              "Name": "id",
              "Type": "int",
              "Desc": "Operation ID",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "restart_operation",
          "Desc": "Restart operation with given operation ID",
          "Static": null,
          "Args": [ 
            {
              "Name": "id",
              "Type": "int",
              "Desc": "Operation ID",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "delete_operation",
          "Desc": "Delete operation with given operation ID",
          "Static": null,
          "Args": [ 
            {
              "Name": "id",
              "Type": "int",
              "Desc": "Operation ID",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "archive_operation",
          "Desc": "Archive operation with given operation ID",
          "Static": null,
          "Args": [ 
            {
              "Name": "id",
              "Type": "int",
              "Desc": "Operation ID",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "enable_updates",
          "Desc": "Enable status update signals",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "disable_updates",
          "Desc": "Disable status update signals",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }
      ],
      "URIs": null
    }, 
    {
      "Name": "RenderProcessor",
      "Desc": null,
      "Signals": [ 
        
      ],
      "Methods": [ 
        {
          "Name": "get",
          "Desc": "Get RenderProcessor instance",
          "Static": 1,
          "Args": {

          },
          "Result": {
            "Type": "RenderProcessor",
            "Desc": ""
          }
        }, 
        {
          "Name": "start",
          "Desc": "Start render operation for the given RenderSetup",
          "Static": null,
          "Args": [ 
            {
              "Name": "renderSetup",
              "Type": "RenderSetup",
              "Desc": "",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "get_progress",
          "Desc": "Returns current render progress",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "RenderStatus",
            "Desc": ""
          }
        }, 
        {
          "Name": "get_log",
          "Desc": "Get log of operation progress",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "array",
            "Desc": "Array of log entries from this render operation"
          }
        }, 
        {
          "Name": "shutdown",
          "Desc": "Shutdown the RenderProcessor instance. This releases any resources in use by the RenderProcessor.",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }
      ],
      "URIs": null
    }, 
    {
      "Name": "RenderSetup",
      "Desc": null,
      "Signals": [ 
        
      ],
      "Methods": [ 
        {
          "Name": "get_image_types",
          "Desc": "Return array of supported image types for rendering",
          "Static": 1,
          "Args": {

          },
          "Result": {
            "Type": "array",
            "Desc": ""
          }
        }, 
        {
          "Name": "get_movie_types",
          "Desc": "Return array of movie types for rendering",
          "Static": 1,
          "Args": {

          },
          "Result": {
            "Type": "array",
            "Desc": ""
          }
        }, 
        {
          "Name": "get_movie_codecs",
          "Desc": "Return array of video codecs available for the given movie type",
          "Static": 1,
          "Args": [ 
            {
              "Name": "movieType",
              "Type": "string",
              "Desc": "Movie type key",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "array",
            "Desc": ""
          }
        }, 
        {
          "Name": "get_movie_audio_codecs",
          "Desc": "Return array of audio codecs available for the given movie type",
          "Static": 1,
          "Args": [ 
            {
              "Name": "movieType",
              "Type": "string",
              "Desc": "Movie type key",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "array",
            "Desc": ""
          }
        }, 
        {
          "Name": "create",
          "Desc": "Create a new RenderSetup instance",
          "Static": 1,
          "Args": {

          },
          "Result": {
            "Type": "RenderSetup",
            "Desc": "New RenderSetup object"
          }
        }, 
        {
          "Name": "create_from_scene",
          "Desc": "Create a new RenderSetup instance configured to render the given Scene using its default deliverables",
          "Static": 1,
          "Args": [ 
            {
              "Name": "scene",
              "Type": "Scene",
              "Desc": "Scene to render and take deliverable configuration from",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "RenderSetup",
            "Desc": ""
          }
        }, 
        {
          "Name": "get_scene",
          "Desc": "Return Scene object for RenderSetup",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "Scene",
            "Desc": ""
          }
        }, 
        {
          "Name": "set_scene",
          "Desc": "Set Scene to Render",
          "Static": null,
          "Args": [ 
            {
              "Name": "scene",
              "Type": "Scene",
              "Desc": "Scene object",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "save_into_scene",
          "Desc": "Save the deliverables from this RenderSetup into the Scene. If a delta is not in progress on the Scene, a new delta will be created for the save operation.",
          "Static": null,
          "Args": [ 
            {
              "Name": "scene",
              "Type": "Scene",
              "Desc": "Scene to save deliverables into. If not specified, the deliverables will be saved into the scene currently associated with the RenderSetup.",
              "Nullable": 1
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "set_deliverables_from_scene",
          "Desc": "Load Deliverables from Scene object assigned to this RenderSetup object",
          "Static": null,
          "Args": [ 
            {
              "Name": "scene",
              "Type": "Scene",
              "Desc": "If specified, load deliverables from the specified Scene instead of scene associated with RenderSetup",
              "Nullable": 1
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "get_num_deliverables",
          "Desc": "Render number of deliverables defined for this Scene",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "int",
            "Desc": "Number of deliverables"
          }
        }, 
        {
          "Name": "get_deliverable_names",
          "Desc": "Return array of deliverable names",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "array",
            "Desc": "Array of deliverable names"
          }
        }, 
        {
          "Name": "get_deliverable",
          "Desc": "Return the RenderDeliverable definition at the given index",
          "Static": null,
          "Args": [ 
            {
              "Name": "index",
              "Type": "int",
              "Desc": "Index of RenderDeliverable",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "RenderDeliverable",
            "Desc": ""
          }
        }, 
        {
          "Name": "set_deliverable",
          "Desc": "Set the settings for the deliverable at the given index",
          "Static": null,
          "Args": [ 
            {
              "Name": "index",
              "Type": "int",
              "Desc": "Index  of deliverable to  update",
              "Nullable": 0
            }, 
            {
              "Name": "deliverable",
              "Type": "RenderDeliverable",
              "Desc": "Settings to use for this deliverable",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "get_deliverable_by_name",
          "Desc": "Get the settings for the RenderDeliverable definition with the given name. Returns NULL if not matching deliverable can be found.",
          "Static": null,
          "Args": [ 
            {
              "Name": "name",
              "Type": "string",
              "Desc": "Name of RenderDeliverable",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "RenderDeliverable",
            "Desc": ""
          }
        }, 
        {
          "Name": "set_deliverable_by_name",
          "Desc": "Set the settings for the RenderDeliverable definition with the given name",
          "Static": null,
          "Args": [ 
            {
              "Name": "name",
              "Type": "string",
              "Desc": "Name of RenderDeliverable to update",
              "Nullable": 0
            }, 
            {
              "Name": "deliverable",
              "Type": "RenderDeliverable",
              "Desc": "Settings to use for this deliverable",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "add_deliverable",
          "Desc": "Add a new deliverable to be generated as part of this render operation",
          "Static": null,
          "Args": [ 
            {
              "Name": "deliverable",
              "Type": "RenderDeliverable",
              "Desc": "Settings for render deliverable",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "delete_deliverable",
          "Desc": "Delete the deliverable at the given index",
          "Static": null,
          "Args": [ 
            {
              "Name": "index",
              "Type": "int",
              "Desc": "Index of deliverable to delete",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "delete_all_deliverables",
          "Desc": "Delete all deliverables defined in the RenderSetup",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "get_deliverable_enabled",
          "Desc": "Get enabled state of deliverable at given index",
          "Static": null,
          "Args": [ 
            {
              "Name": "index",
              "Type": "int",
              "Desc": "Index of deliverable",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "set_deliverable_enabled",
          "Desc": "Set enabled state of deliverable at given index",
          "Static": null,
          "Args": [ 
            {
              "Name": "index",
              "Type": "int",
              "Desc": "Index of deliverable",
              "Nullable": 0
            }, 
            {
              "Name": "enabled",
              "Type": "int",
              "Desc": "Flag indicating whether deliverable is enabled for rendering",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "set_container",
          "Desc": "Set the output container directory for all deliverables",
          "Static": null,
          "Args": [ 
            {
              "Name": "container",
              "Type": "string",
              "Desc": "Container path",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "get_frames",
          "Desc": "Get list of frame ranges to render",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "array",
            "Desc": "List of frame ranges"
          }
        }, 
        {
          "Name": "set_frames",
          "Desc": "Set list of frame ranges to render",
          "Static": null,
          "Args": [ 
            {
              "Name": "frames",
              "Type": "array",
              "Desc": "List of frame ranges",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "select_all",
          "Desc": "Select all frames in Scene to render",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "select_shots",
          "Desc": "Select the given Shots for rendering",
          "Static": null,
          "Args": [ 
            {
              "Name": "shots",
              "Type": "array",
              "Desc": "Array of Shot objects to select",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "select_shot_ids",
          "Desc": "Select the given Shots identified by their ID for rendering",
          "Static": null,
          "Args": [ 
            {
              "Name": "shotids",
              "Type": "array",
              "Desc": "Array of Shot IDs to select",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "select_graded_shots",
          "Desc": "Select all graded shots to render",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "select_timeline_marks",
          "Desc": "Select timeline marks matching the categories in the given category set",
          "Static": null,
          "Args": [ 
            {
              "Name": "categories",
              "Type": "set",
              "Desc": "Set of categories to match against",
              "Nullable": 1
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "select_shot_marks",
          "Desc": "Select shot marks matching the categories in the given category set",
          "Static": null,
          "Args": [ 
            {
              "Name": "categories",
              "Type": "set",
              "Desc": "Set of categories to match against",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "select_poster_frames",
          "Desc": "Select all shot poster frames to render",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "select_shots_of_category",
          "Desc": "Select shots marked with one of the categories in the given category set",
          "Static": null,
          "Args": [ 
            {
              "Name": "categories",
              "Type": "set",
              "Desc": "Set of categories to match against",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "submit_to_queue",
          "Desc": "Submit the current Render operation to a Queue for processing",
          "Static": null,
          "Args": [ 
            {
              "Name": "context",
              "Type": "context",
              "Desc": null,
              "Nullable": 0
            }, 
            {
              "Name": "queue",
              "Type": "QueueManager",
              "Desc": "QueueManager object for machine running render queue",
              "Nullable": 0
            }, 
            {
              "Name": "opname",
              "Type": "string",
              "Desc": "Operation name to use for queue job",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "RenderOpInfo",
            "Desc": "Operation info for job added to render queue"
          }
        }
      ],
      "URIs": null
    }, 
    {
      "Name": "Scene",
      "Desc": null,
      "Signals": [ 
        "OpenSceneDone", 
        "NewSceneDone", 
        "TemporarySceneDone", 
        "SceneRangeDirty"
      ],
      "Methods": [ 
        {
          "Name": "parse_path",
          "Desc": "Convert the given string into a ScenePath object contaning Host, Job, Scene components, or raise an error if the path is invalid",
          "Static": 1,
          "Args": [ 
            {
              "Name": "str",
              "Type": "string",
              "Desc": "Path string containing host, job, folder and scene elements",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "ScenePath",
            "Desc": "A ScenePath object containing the elements of the path"
          }
        }, 
        {
          "Name": "path_to_string",
          "Desc": "Convert the given ScenePath object into a string",
          "Static": 1,
          "Args": [ 
            {
              "Name": "scenepath",
              "Type": "ScenePath",
              "Desc": "ScenePath object containing Host, Job, Scene fields",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "string",
            "Desc": "String form of ScenePath"
          }
        }, 
        {
          "Name": "create",
          "Desc": "Create an empty Scene object, which can then be used to create a temporary scene, a new scene, or load an existing scene. After creating an empty Scene object, you must call ::temporary_scene_nonblock::, ::new_scene_nonblock:: or ::open_scene_nonblock::. ",
          "Static": 1,
          "Args": [ 
            {
              "Name": "client",
              "Type": "context",
              "Desc": null,
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "Scene",
            "Desc": "Scene object"
          }
        }, 
        {
          "Name": "new_scene",
          "Desc": "Create a new scene stored in a database. This function will block until the new scene has been created in the database. If the new scene cannot be created, this function will raise an exception containing an error message.",
          "Static": 1,
          "Args": [ 
            {
              "Name": "scenepath",
              "Type": "ScenePath",
              "Desc": "",
              "Nullable": 0
            }, 
            {
              "Name": "options",
              "Type": "NewSceneOptions",
              "Desc": "Options to use for new scene",
              "Nullable": 0
            }, 
            {
              "Name": "client",
              "Type": "context",
              "Desc": null,
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "Scene",
            "Desc": ""
          }
        }, 
        {
          "Name": "open_scene",
          "Desc": "Open a scene. This function will block until the scene has been opened. If the scene cannot be opened, this function will raise an exception containing an error message.",
          "Static": 1,
          "Args": [ 
            {
              "Name": "scenepath",
              "Type": "ScenePath",
              "Desc": "ScenePath identifying scene to open",
              "Nullable": 0
            }, 
            {
              "Name": "flags",
              "Type": "set",
              "Desc": "",
              "Nullable": 1
            }, 
            {
              "Name": "client",
              "Type": "context",
              "Desc": null,
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "Scene",
            "Desc": ""
          }
        }, 
        {
          "Name": "temporary_scene",
          "Desc": "Create a temporary scene that is not stored in a database. This function will block until the temporary scene has been created. If the temporary scene cannot be created, this function will raise an exception containing an error message.",
          "Static": 1,
          "Args": [ 
            {
              "Name": "options",
              "Type": "NewSceneOptions",
              "Desc": "Options to use for new scene",
              "Nullable": 0
            }, 
            {
              "Name": "client",
              "Type": "context",
              "Desc": null,
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "Scene",
            "Desc": ""
          }
        }, 
        {
          "Name": "new_scene_nonblock",
          "Desc": "Create a new scene",
          "Static": null,
          "Args": [ 
            {
              "Name": "scenepath",
              "Type": "ScenePath",
              "Desc": "",
              "Nullable": 0
            }, 
            {
              "Name": "options",
              "Type": "NewSceneOptions",
              "Desc": "Options to use for new scene",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "open_scene_nonblock",
          "Desc": "Open a scene",
          "Static": null,
          "Args": [ 
            {
              "Name": "scenepath",
              "Type": "ScenePath",
              "Desc": "ScenePath identifying scene to open",
              "Nullable": 0
            }, 
            {
              "Name": "flags",
              "Type": "set",
              "Desc": "",
              "Nullable": 1
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "temporary_scene_nonblock",
          "Desc": "Create a temporary scene that is not stored in a database",
          "Static": null,
          "Args": [ 
            {
              "Name": "options",
              "Type": "NewSceneOptions",
              "Desc": "Options to use for new scene",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "save_scene",
          "Desc": "Save changes to scene into database",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "get_open_status",
          "Desc": "Fetch status of scene open operation",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "OpenSceneStatus",
            "Desc": ""
          }
        }, 
        {
          "Name": "wait_until_open",
          "Desc": "Wait for any scene opening/creation operations to complete, and return the status",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "OpenSceneStatus",
            "Desc": ""
          }
        }, 
        {
          "Name": "close_scene",
          "Desc": "Close scene",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "int",
            "Desc": "1 on success, 0 if no scene is open."
          }
        }, 
        {
          "Name": "get_scene_pathname",
          "Desc": "Get current scene's 'pathname' string (typically 'host:job:scene')",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "string",
            "Desc": "Scene's pathname string"
          }
        }, 
        {
          "Name": "get_scene_container",
          "Desc": "Get the current container for the scene",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "string",
            "Desc": "Container path for the scene"
          }
        }, 
        {
          "Name": "set_scene_container",
          "Desc": "Set the current container for the scene",
          "Static": null,
          "Args": [ 
            {
              "Name": "container",
              "Type": "string",
              "Desc": "New container path for the scene",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "start_delta",
          "Desc": "Start a 'delta' on a scene that has been opened read/write. A delta is a set of modifcations/edits on a scene that together constitute a single, logical operation/transaction. Each start_delta call must have a matching end_delta call (with one or more editing operations in between). Every delta has a user visible name (eg. 'Change Film Grade Exposure'). Once a delta has been completed/ended it becomes an atomic, undoable operation.",
          "Static": null,
          "Args": [ 
            {
              "Name": "name",
              "Type": "string",
              "Desc": "Name of delta to start",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "cancel_delta",
          "Desc": "Cancel a 'delta' (a set of scene modifications/edits) previously started via the start_delta() method, reverting the Scene back to the state it was in before start_delta().",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "end_delta",
          "Desc": "End a 'delta' (a set of scene modifications/edits) previously started via the start_delta() method.",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "get_formats",
          "Desc": "Return FormatSet for formats defined within this Scene",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "FormatSet",
            "Desc": ""
          }
        }, 
        {
          "Name": "get_scene_settings",
          "Desc": "Return SceneSettings object for this Scene",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "SceneSettings",
            "Desc": ""
          }
        }, 
        {
          "Name": "get_category",
          "Desc": "Return category definition",
          "Static": null,
          "Args": [ 
            {
              "Name": "key",
              "Type": "string",
              "Desc": "Key used to identify category",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "CategoryInfo",
            "Desc": ""
          }
        }, 
        {
          "Name": "set_category",
          "Desc": "Overwrites an existing category in the scene, or adds a new category if a category of that name doesn't exist. Will fail if an attempt is made to overwrite an built-in, read-only category.",
          "Static": null,
          "Args": [ 
            {
              "Name": "name",
              "Type": "string",
              "Desc": "User-visible name for this category. This value will also act as the key identifying the category when adding categories to strips and marks.",
              "Nullable": 0
            }, 
            {
              "Name": "colour",
              "Type": "array",
              "Desc": "Colour associated with this category",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "get_mark_categories",
          "Desc": "Return array of mark category keys",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "array",
            "Desc": "Array of mark category keys"
          }
        }, 
        {
          "Name": "get_strip_categories",
          "Desc": "Return array of strip category keys",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "array",
            "Desc": "Array of strip category keys"
          }
        }, 
        {
          "Name": "get_start_frame",
          "Desc": "Get frame number of start of first shot in scene",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "int",
            "Desc": "Frame number"
          }
        }, 
        {
          "Name": "get_end_frame",
          "Desc": "Get frame number of end of last shot in scene",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "int",
            "Desc": "Frame number"
          }
        }, 
        {
          "Name": "get_working_frame_rate",
          "Desc": "Get the working frame rate of the current scene (in FPS)",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "float",
            "Desc": "The scene's frame rate (in FPS)."
          }
        }, 
        {
          "Name": "get_record_timecode_for_frame",
          "Desc": "Get record timecode for a given (timeline) frame number",
          "Static": null,
          "Args": [ 
            {
              "Name": "frame_num",
              "Type": "int",
              "Desc": "Timeline frame number",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "timecode",
            "Desc": "Record timecode"
          }
        }, 
        {
          "Name": "get_shot_index_range",
          "Desc": "Get index range of shots intersecting the (end exclusive) timeline frame range supplied ",
          "Static": null,
          "Args": [ 
            {
              "Name": "startFrame",
              "Type": "float",
              "Desc": "timeline frame range start",
              "Nullable": 0
            }, 
            {
              "Name": "endFrame",
              "Type": "float",
              "Desc": "timeline frame range end",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "ShotIndexRange",
            "Desc": "shot index range"
          }
        }, 
        {
          "Name": "get_num_shots",
          "Desc": "Get number of Shots within scene",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "int",
            "Desc": "Number of Shots"
          }
        }, 
        {
          "Name": "get_shot_id_at",
          "Desc": "Return the ID of the shot at the timeline frame number supplied",
          "Static": null,
          "Args": [ 
            {
              "Name": "frame",
              "Type": "int",
              "Desc": "Timeline frame number",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "int",
            "Desc": "ID of shot at frame, or -1 if none found"
          }
        }, 
        {
          "Name": "get_shot_id",
          "Desc": "Return the ID for the shot at the given index within the Scene",
          "Static": null,
          "Args": [ 
            {
              "Name": "index",
              "Type": "int",
              "Desc": "Index of shot within scene (relative to get_num_shots)",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "int",
            "Desc": "Shot ID"
          }
        }, 
        {
          "Name": "get_shot_ids",
          "Desc": "Get an array of shots in the supplied indexed range. Each array entry is an object containing basic information for that shot. Explicitly, each shot entry will contain the following keys:  * ShotId - A shot idenfifier (which can be used to obtain a Shot object via get_shot() if required). * StartFrame - The shot's timeline start frame * EndFrame - The shot's timeline end frame * PosterFrame - The shot's timeline poster frame  Returns new array shot list on success, NULL on error.",
          "Static": null,
          "Args": [ 
            {
              "Name": "firstIndex",
              "Type": "int",
              "Desc": "Index of first shot",
              "Nullable": 0
            }, 
            {
              "Name": "lastIndex",
              "Type": "int",
              "Desc": "Index of last shot",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "array",
            "Desc": "Array of shot info objects"
          }
        }, 
        {
          "Name": "get_shot",
          "Desc": "Create a new Shot object for the given shot ID",
          "Static": null,
          "Args": [ 
            {
              "Name": "shot_id",
              "Type": "int",
              "Desc": "Identifier of shot",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "Shot",
            "Desc": "Shot object"
          }
        }, 
        {
          "Name": "delete_shot",
          "Desc": "Delete the given shot and its associated layers from the Scene",
          "Static": null,
          "Args": [ 
            {
              "Name": "shot_id",
              "Type": "int",
              "Desc": "ID of Shot to be deleted. Note this is *not* an index",
              "Nullable": 0
            }, 
            {
              "Name": "cleanup",
              "Type": "int",
              "Desc": "Flag indicating whether vertical space left by shot should be reclaimed",
              "Nullable": 0
            }, 
            {
              "Name": "closeGap",
              "Type": "int",
              "Desc": "Flag indicating whether horizontal gap left by shot should be closed",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "insert_bars",
          "Desc": "Insert a Bars strip into the Scene",
          "Static": null,
          "Args": [ 
            {
              "Name": "barType",
              "Type": "string",
              "Desc": "The type of Bars to insert.",
              "Nullable": 0
            }, 
            {
              "Name": "duration",
              "Type": "float",
              "Desc": "Duration for strip in frames",
              "Nullable": 0
            }, 
            {
              "Name": "where",
              "Type": "string",
              "Desc": "Where in the scene the sequence should be inserted.",
              "Nullable": 0
            }, 
            {
              "Name": "relativeTo",
              "Type": "Shot",
              "Desc": "Shot to insert sequence relative to when using INSERT_BEFORE, INSERT_AFTER, INSERT_ABOVE, or INSERT_BELOW",
              "Nullable": 1
            }, 
            {
              "Name": "barsColourSpace",
              "Type": "string",
              "Desc": "Name of desired Bars colour space, or NULL to use the default Bars colour space for the barType",
              "Nullable": 1
            }, 
            {
              "Name": "stackColourSpace",
              "Type": "string",
              "Desc": "Name of desired Stack colour space, or NULL to use the default Stack colour space for the barType",
              "Nullable": 1
            }
          ],
          "Result": {
            "Type": "Shot",
            "Desc": "Shot created by inserting Blank into Scene"
          }
        }, 
        {
          "Name": "insert_blank",
          "Desc": "Insert a Blank strip into the Scene",
          "Static": null,
          "Args": [ 
            {
              "Name": "red",
              "Type": "string",
              "Desc": "Red component of colour for blank",
              "Nullable": 0
            }, 
            {
              "Name": "green",
              "Type": "string",
              "Desc": "Green component of colour for blank",
              "Nullable": 0
            }, 
            {
              "Name": "blue",
              "Type": "string",
              "Desc": "Blue component of colour for blank",
              "Nullable": 0
            }, 
            {
              "Name": "duration",
              "Type": "float",
              "Desc": "Duration for strip in frames",
              "Nullable": 0
            }, 
            {
              "Name": "where",
              "Type": "string",
              "Desc": "Where in the scene the sequence should be inserted.",
              "Nullable": 0
            }, 
            {
              "Name": "relativeTo",
              "Type": "Shot",
              "Desc": "Shot to insert sequence relative to when using INSERT_BEFORE, INSERT_AFTER, INSERT_ABOVE, or INSERT_BELOW",
              "Nullable": 1
            }, 
            {
              "Name": "colourSpace",
              "Type": "string",
              "Desc": "Name of desired output colour space, or NULL to use the working colour space",
              "Nullable": 1
            }
          ],
          "Result": {
            "Type": "Shot",
            "Desc": "Shot created by inserting Blank into Scene"
          }
        }, 
        {
          "Name": "insert_sequence",
          "Desc": "Insert an image/movie sequence into the Scene",
          "Static": null,
          "Args": [ 
            {
              "Name": "sequence",
              "Type": "SequenceDescriptor",
              "Desc": "SequenceDescriptor for sequence to insert",
              "Nullable": 0
            }, 
            {
              "Name": "where",
              "Type": "string",
              "Desc": "Where in the scene the sequence should be inserted.",
              "Nullable": 0
            }, 
            {
              "Name": "relativeTo",
              "Type": "Shot",
              "Desc": "Shot to insert sequence relative to when using INSERT_BEFORE, INSERT_AFTER, INSERT_ABOVE, or INSERT_BELOW",
              "Nullable": 1
            }, 
            {
              "Name": "colourSpace",
              "Type": "string",
              "Desc": "Input Colour Space to use for sequence. Leave NULL to determine automatically",
              "Nullable": 1
            }, 
            {
              "Name": "format",
              "Type": "string",
              "Desc": "Input Format to use for sequence. Leave NULL to use basic format",
              "Nullable": 1
            }
          ],
          "Result": {
            "Type": "Shot",
            "Desc": "Shot created by inserting SequenceDescriptor into Scene"
          }
        }, 
        {
          "Name": "insert_text",
          "Desc": "Insert a Text strip into the Scene",
          "Static": null,
          "Args": [ 
            {
              "Name": "text",
              "Type": "string",
              "Desc": "The text to rendered in the Rop.",
              "Nullable": 0
            }, 
            {
              "Name": "duration",
              "Type": "float",
              "Desc": "Duration for strip in frames",
              "Nullable": 0
            }, 
            {
              "Name": "where",
              "Type": "string",
              "Desc": "Where in the scene the sequence should be inserted",
              "Nullable": 0
            }, 
            {
              "Name": "relativeTo",
              "Type": "Shot",
              "Desc": "Shot to insert sequence relative to when using INSERT_BEFORE, INSERT_AFTER, INSERT_ABOVE, or INSERT_BELOW",
              "Nullable": 1
            }, 
            {
              "Name": "alignment",
              "Type": "string",
              "Desc": "Alignment for the text",
              "Nullable": 1
            }
          ],
          "Result": {
            "Type": "Shot",
            "Desc": "Shot created by inserting Text into Scene"
          }
        }, 
        {
          "Name": "get_num_marks",
          "Desc": "Return number of Timeline Marks in Scene",
          "Static": null,
          "Args": [ 
            {
              "Name": "type",
              "Type": "string",
              "Desc": "If specified, return number of marks of this type",
              "Nullable": 1
            }
          ],
          "Result": {
            "Type": "int",
            "Desc": "Number of marks"
          }
        }, 
        {
          "Name": "get_mark_ids",
          "Desc": "Return array of mark ids",
          "Static": null,
          "Args": [ 
            {
              "Name": "offset",
              "Type": "int",
              "Desc": "Offset within list of marks to fetch from",
              "Nullable": 0
            }, 
            {
              "Name": "count",
              "Type": "int",
              "Desc": "Number of Mark objects to fetch, use -1 to fetch all marks",
              "Nullable": 0
            }, 
            {
              "Name": "type",
              "Type": "string",
              "Desc": "If specified, only return marks of this type",
              "Nullable": 1
            }
          ],
          "Result": {
            "Type": "array",
            "Desc": "Array of Mark IDs"
          }
        }, 
        {
          "Name": "get_mark_ids_in_range",
          "Desc": "Return array of mark ids within the given frame range in the Scene",
          "Static": null,
          "Args": [ 
            {
              "Name": "startF",
              "Type": "int",
              "Desc": "Start frame in Scene timeline",
              "Nullable": 0
            }, 
            {
              "Name": "endF",
              "Type": "int",
              "Desc": "End frame in Scene timeline (exclusive)",
              "Nullable": 0
            }, 
            {
              "Name": "type",
              "Type": "string",
              "Desc": "Mark type/category",
              "Nullable": 1
            }
          ],
          "Result": {
            "Type": "array",
            "Desc": "Array of Mark IDs"
          }
        }, 
        {
          "Name": "get_mark",
          "Desc": "Return Mark object for the given mark ID",
          "Static": null,
          "Args": [ 
            {
              "Name": "id",
              "Type": "int",
              "Desc": "Mark ID",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "Mark",
            "Desc": "Mark object matching the given mark ID"
          }
        }, 
        {
          "Name": "add_mark",
          "Desc": "Add new Mark to the Scene at the given frame number",
          "Static": null,
          "Args": [ 
            {
              "Name": "frame",
              "Type": "int",
              "Desc": "Frame number",
              "Nullable": 0
            }, 
            {
              "Name": "category",
              "Type": "string",
              "Desc": "Key identifying Mark Category",
              "Nullable": 0
            }, 
            {
              "Name": "note",
              "Type": "string",
              "Desc": "Note text for mark",
              "Nullable": 1
            }
          ],
          "Result": {
            "Type": "int",
            "Desc": "ID of new mark object"
          }
        }, 
        {
          "Name": "delete_mark",
          "Desc": "Remove Mark object with the given ID",
          "Static": null,
          "Args": [ 
            {
              "Name": "id",
              "Type": "int",
              "Desc": "Mark ID",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "get_metadata_definitions",
          "Desc": "Return array of metadata item definitions",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "array",
            "Desc": "Array of MetadataItems define metadata types defined in scene"
          }
        }, 
        {
          "Name": "add_metadata_defn",
          "Desc": "Add a new Metadata Item field to the Scene",
          "Static": null,
          "Args": [ 
            {
              "Name": "name",
              "Type": "string",
              "Desc": "User-visible name for Metadata Item",
              "Nullable": 0
            }, 
            {
              "Name": "type",
              "Type": "string",
              "Desc": "Data type for Metadata Item",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "MetadataItem",
            "Desc": "Definition of new Metadata Item, including internal Key created for it"
          }
        }, 
        {
          "Name": "delete_metadata_defn",
          "Desc": "Delete a Metadata Item field from the Scene",
          "Static": null,
          "Args": [ 
            {
              "Name": "key",
              "Type": "string",
              "Desc": "Key identifying metadata item to delete",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "get_metadata_property_types",
          "Desc": "Return list of properties that can be defined for each MetadataItem",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "array",
            "Desc": "Array of MetadataProperty objects"
          }
        }, 
        {
          "Name": "get_metadata_defn_property",
          "Desc": "Set the value for the given property for the given metadata item key",
          "Static": null,
          "Args": [ 
            {
              "Name": "key",
              "Type": "string",
              "Desc": "Key identifying metadata item to modify",
              "Nullable": 0
            }, 
            {
              "Name": "property",
              "Type": "string",
              "Desc": "Key identifying which property of the metadata item to get",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "string",
            "Desc": "Current value for metadata item property"
          }
        }, 
        {
          "Name": "set_metadata_defn_property",
          "Desc": "Set the value for the given property for the given metadata item key",
          "Static": null,
          "Args": [ 
            {
              "Name": "key",
              "Type": "string",
              "Desc": "Key identifying metadata item to modify",
              "Nullable": 0
            }, 
            {
              "Name": "property",
              "Type": "string",
              "Desc": "Key identifying which property of the metadata item to set",
              "Nullable": 0
            }, 
            {
              "Name": "value",
              "Type": "string",
              "Desc": "New property value",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "get_look_names",
          "Desc": "Return names of available Looks",
          "Static": 1,
          "Args": {

          },
          "Result": {
            "Type": "array",
            "Desc": "Array of names of looks"
          }
        }, 
        {
          "Name": "get_look_infos",
          "Desc": "Get an array of available Looks.  Each array entry is a LookInfo object containing the Name and Group for each Look. Explicitly, each entry will contain the following keys:  * Name - The name of the look.   This is unique and used as an identifier * Group - The look group for the look  Returns new array of LookInfo objects on success, NULL on error.",
          "Static": 1,
          "Args": {

          },
          "Result": {
            "Type": "array",
            "Desc": "Array of shot info objects"
          }
        }
      ],
      "URIs": null
    }, 
    {
      "Name": "SceneSettings",
      "Desc": null,
      "Signals": [ 
        
      ],
      "Methods": [ 
        {
          "Name": "get_setting_keys",
          "Desc": "Return array of keys that can be used to get/set Scene Settings parameters",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "array",
            "Desc": ""
          }
        }, 
        {
          "Name": "get_setting_definition",
          "Desc": "Return SceneSettings parameter type definition for the given key",
          "Static": null,
          "Args": [ 
            {
              "Name": "key",
              "Type": "string",
              "Desc": "Key for SceneSettings parameter",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "SceneSettingDefinition",
            "Desc": ""
          }
        }, 
        {
          "Name": "get",
          "Desc": "Return values for given SceneSettings keys",
          "Static": null,
          "Args": [ 
            {
              "Name": "keys",
              "Type": "array",
              "Desc": "Array of keys",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "struct",
            "Desc": ""
          }
        }, 
        {
          "Name": "get_single",
          "Desc": "Return value for given SceneSettings key",
          "Static": null,
          "Args": [ 
            {
              "Name": "key",
              "Type": "string",
              "Desc": "SceneSettings Key for value wanted",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "any",
            "Desc": ""
          }
        }, 
        {
          "Name": "set",
          "Desc": "Set values for the given SceneSettings keys",
          "Static": null,
          "Args": [ 
            {
              "Name": "values",
              "Type": "struct",
              "Desc": "A dictionary containing new values for the given SceneSettings keys",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "set_single",
          "Desc": "Set value for the given SceneSettings key",
          "Static": null,
          "Args": [ 
            {
              "Name": "key",
              "Type": "string",
              "Desc": "SceneSettings key for value to set",
              "Nullable": 0
            }, 
            {
              "Name": "value",
              "Type": "any",
              "Desc": "New value for the given SceneSettings key",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }
      ],
      "URIs": null
    }, 
    {
      "Name": "SequenceDescriptor",
      "Desc": null,
      "Signals": [ 
        
      ],
      "Methods": [ 
        {
          "Name": "get_for_template",
          "Desc": "Search the filesystem and return zero or more SequenceDescriptors which match the given filename template (e.g. \"/vol/images/A001B002.mov\" or \"/vol/san/folder/%.6F.dpx\", and optionally intersecting the given start and end frame numbers.",
          "Static": 1,
          "Args": [ 
            {
              "Name": "template",
              "Type": "string",
              "Desc": "Path to the file, using FilmLight %.#F syntax for frame numbering",
              "Nullable": 0
            }, 
            {
              "Name": "start",
              "Type": "int",
              "Desc": "Start frame number",
              "Nullable": 1
            }, 
            {
              "Name": "end",
              "Type": "int",
              "Desc": "End frame number (inclusive)",
              "Nullable": 1
            }
          ],
          "Result": {
            "Type": "array",
            "Desc": "Array of SequenceDescriptor objects"
          }
        }, 
        {
          "Name": "get_for_template_with_timecode",
          "Desc": "Search the filesystem and return zero or more SequenceDescriptors which match the given filename template (e.g. \"/vol/images/A001B002.mov\" or \"/vol/san/folder/%.6F.dpx\", and optionally intersecting the given start and end timecodes.",
          "Static": 1,
          "Args": [ 
            {
              "Name": "template",
              "Type": "string",
              "Desc": "Path to the file, using FilmLight %.#F syntax for frame numbering",
              "Nullable": 0
            }, 
            {
              "Name": "startTC",
              "Type": "timecode",
              "Desc": "Start timecode",
              "Nullable": 1
            }, 
            {
              "Name": "endTC",
              "Type": "timecode",
              "Desc": "End timecode (inclusive)",
              "Nullable": 1
            }
          ],
          "Result": {
            "Type": "array",
            "Desc": "Array of SequenceDescriptor objects"
          }
        }, 
        {
          "Name": "get_for_file",
          "Desc": "Create a SequenceDescriptor for a single file",
          "Static": 1,
          "Args": [ 
            {
              "Name": "filepath",
              "Type": "string",
              "Desc": "Path to file",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "SequenceDescriptor",
            "Desc": "SequenceDescriptor for given path"
          }
        }, 
        {
          "Name": "get_start_frame",
          "Desc": "Return the first frame number, which does not necessarily correspond with the first frame of the files on disk.",
          "Static": null,
          "Args": null,
          "Result": {
            "Type": "int",
            "Desc": "Frame number"
          }
        }, 
        {
          "Name": "get_end_frame",
          "Desc": "Return the last frame number, which does not necessarily correspond with the last frame of the files on disk.",
          "Static": null,
          "Args": null,
          "Result": {
            "Type": "int",
            "Desc": "Frame number"
          }
        }, 
        {
          "Name": "get_start_timecode",
          "Desc": "Return the timecode at the first frame of the sequence. Some media can support two timecode tracks, so you must specify which one you want (0 or 1).",
          "Static": null,
          "Args": [ 
            {
              "Name": "index",
              "Type": "int",
              "Desc": "Index of timecode track",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "timecode",
            "Desc": "Start timecode"
          }
        }, 
        {
          "Name": "get_end_timecode",
          "Desc": "Return the timecode at the last frame of the sequence. Some media can support two timecode tracks, so you must specify which one you want (0 or 1).",
          "Static": null,
          "Args": [ 
            {
              "Name": "index",
              "Type": "int",
              "Desc": "Index of timecode track",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "timecode",
            "Desc": "End timecode"
          }
        }, 
        {
          "Name": "get_start_keycode",
          "Desc": "Return the keycode at the first frame of the sequence.",
          "Static": null,
          "Args": null,
          "Result": {
            "Type": "keycode",
            "Desc": "Start keycode"
          }
        }, 
        {
          "Name": "get_end_keycode",
          "Desc": "Return the keycode at the last frame of the sequence.",
          "Static": null,
          "Args": null,
          "Result": {
            "Type": "keycode",
            "Desc": "End keycode"
          }
        }, 
        {
          "Name": "get_start_handle",
          "Desc": "Return the first frame number on disk (0 for movie files).",
          "Static": null,
          "Args": null,
          "Result": {
            "Type": "int",
            "Desc": "Frame number"
          }
        }, 
        {
          "Name": "get_end_handle",
          "Desc": "Return the last frame number on disk (inclusive).",
          "Static": null,
          "Args": null,
          "Result": {
            "Type": "int",
            "Desc": "Frame number"
          }
        }, 
        {
          "Name": "get_width",
          "Desc": "Return the width (in pixels) of the images in this sequence. Returns 0 for audio-only media.",
          "Static": null,
          "Args": null,
          "Result": {
            "Type": "int",
            "Desc": "Width"
          }
        }, 
        {
          "Name": "get_height",
          "Desc": "Return the height (in pixels) of the images in this sequence. Returns 0 for audio-only media.",
          "Static": null,
          "Args": null,
          "Result": {
            "Type": "int",
            "Desc": "Height"
          }
        }, 
        {
          "Name": "get_pixel_aspect_ratio",
          "Desc": "Return the pixel aspect ratio (width/height) of the images in this sequence. Returns 1.0 if unknown.",
          "Static": null,
          "Args": null,
          "Result": {
            "Type": "float",
            "Desc": "Aspect ratio"
          }
        }, 
        {
          "Name": "get_path",
          "Desc": "Return the path to the folder containing this sequence.",
          "Static": null,
          "Args": null,
          "Result": {
            "Type": "string",
            "Desc": "Folder path"
          }
        }, 
        {
          "Name": "get_name",
          "Desc": "Return the filename (for a movie) or the filename template (for an image sequence, using FilmLight %.#F syntax for frame numbering), excluding the folder path.",
          "Static": null,
          "Args": null,
          "Result": {
            "Type": "string",
            "Desc": "Name of sequence"
          }
        }, 
        {
          "Name": "get_ext",
          "Desc": "Return the filename extension (including the leading '.') for this sequence.",
          "Static": null,
          "Args": null,
          "Result": {
            "Type": "string",
            "Desc": "Extension"
          }
        }, 
        {
          "Name": "get_prefix",
          "Desc": "Return filename prefix before numeric component",
          "Static": null,
          "Args": null,
          "Result": {
            "Type": "string",
            "Desc": "Prefix"
          }
        }, 
        {
          "Name": "get_postfix",
          "Desc": "Return filename postfix after numeric component",
          "Static": null,
          "Args": null,
          "Result": {
            "Type": "string",
            "Desc": "Postfix"
          }
        }, 
        {
          "Name": "get_format_len",
          "Desc": "Return number of digits in numerical component of filename",
          "Static": null,
          "Args": null,
          "Result": {
            "Type": "int",
            "Desc": "Number of digits"
          }
        }, 
        {
          "Name": "get_base_filename_with_F",
          "Desc": "Return filename (without path) using FilmLight %.#F syntax for the frame number pattern",
          "Static": null,
          "Args": null,
          "Result": {
            "Type": "string",
            "Desc": "Filename template"
          }
        }, 
        {
          "Name": "get_base_filename_with_d",
          "Desc": "Return filename (without path) using printf %0#d syntax for the frame number pattern",
          "Static": null,
          "Args": null,
          "Result": {
            "Type": "string",
            "Desc": "Filename template"
          }
        }, 
        {
          "Name": "get_full_filename_with_F",
          "Desc": "Return filename (with path) using FilmLight %.#F syntax for the frame number pattern",
          "Static": null,
          "Args": null,
          "Result": {
            "Type": "string",
            "Desc": "Filename"
          }
        }, 
        {
          "Name": "get_full_filename_with_d",
          "Desc": "Return filename (with path) using printf %0#d syntax for the frame number pattern",
          "Static": null,
          "Args": null,
          "Result": {
            "Type": "string",
            "Desc": "Filename"
          }
        }, 
        {
          "Name": "get_base_filename",
          "Desc": "Return filename (without path) for the given frame number",
          "Static": null,
          "Args": [ 
            {
              "Name": "frame",
              "Type": "int",
              "Desc": "Frame number",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "string",
            "Desc": "Filename"
          }
        }, 
        {
          "Name": "get_filename_for_frame",
          "Desc": "Return filename (with path) for the given frame number",
          "Static": null,
          "Args": [ 
            {
              "Name": "frame",
              "Type": "int",
              "Desc": "Frame number",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "string",
            "Desc": "Filename"
          }
        }, 
        {
          "Name": "get_tape",
          "Desc": "Return the tape name. Some media can support two tracks, so you must specify which one you want (0 or 1).",
          "Static": null,
          "Args": [ 
            {
              "Name": "index",
              "Type": "int",
              "Desc": "Index of timecode track",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "string",
            "Desc": "Tape name"
          }
        }, 
        {
          "Name": "get_metadata",
          "Desc": "Return the metadata read when the sequence was scanned on disk, in human-readable form.",
          "Static": null,
          "Args": null,
          "Result": {
            "Type": "struct",
            "Desc": "Metadata"
          }
        }, 
        {
          "Name": "is_movie",
          "Desc": "Return whether sequence is a movie file",
          "Static": null,
          "Args": null,
          "Result": {
            "Type": "int",
            "Desc": "Flag"
          }
        }, 
        {
          "Name": "has_blg",
          "Desc": "Return whether sequence has BLG (Baselight Linked Grade) information",
          "Static": null,
          "Args": null,
          "Result": {
            "Type": "int",
            "Desc": "Flag"
          }
        }, 
        {
          "Name": "is_blg",
          "Desc": "Return whether sequence is a BLG (Baselight Linked Grade)",
          "Static": null,
          "Args": null,
          "Result": {
            "Type": "int",
            "Desc": "Flag"
          }
        }, 
        {
          "Name": "has_audio",
          "Desc": "Return whether movie file has audio",
          "Static": null,
          "Args": null,
          "Result": {
            "Type": "int",
            "Desc": "Flag"
          }
        }, 
        {
          "Name": "get_audio_channels",
          "Desc": "Return number of audio channels in movie",
          "Static": null,
          "Args": null,
          "Result": {
            "Type": "int",
            "Desc": "Number of channels"
          }
        }, 
        {
          "Name": "get_audio_sample_rate",
          "Desc": "Return audio sample rate (in Hz)",
          "Static": null,
          "Args": null,
          "Result": {
            "Type": "int",
            "Desc": "Sample rate"
          }
        }, 
        {
          "Name": "get_audio_length_in_samples",
          "Desc": "Return total number of audio samples in file",
          "Static": null,
          "Args": null,
          "Result": {
            "Type": "int",
            "Desc": "Length"
          }
        }, 
        {
          "Name": "trim_movie",
          "Desc": "Create (if possible) a trimmed copy of the movie specified by this descriptor",
          "Static": null,
          "Args": [ 
            {
              "Name": "output",
              "Type": "string",
              "Desc": "Output movie file name",
              "Nullable": 0
            }, 
            {
              "Name": "start",
              "Type": "int",
              "Desc": "Start frame of output movie",
              "Nullable": 0
            }, 
            {
              "Name": "length",
              "Type": "int",
              "Desc": "Number of frames to write to output movie",
              "Nullable": 0
            }
          ],
          "Result": null
        }
      ],
      "URIs": null
    }, 
    {
      "Name": "Shot",
      "Desc": null,
      "Signals": [ 
        
      ],
      "Methods": [ 
        {
          "Name": "is_valid",
          "Desc": " Called to determine if the shot object references a valid top strip an open scene. A shot object may become invalid in a couple of ways:    * The scene which it is in is closed.   * The shot's top strip is removed from the scene's timeline.",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "int",
            "Desc": "1 if this shot interface is valid, 0 if not."
          }
        }, 
        {
          "Name": "get_scene",
          "Desc": "Get the scene object which this shot is a part of.",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "Scene",
            "Desc": "The shot's scene."
          }
        }, 
        {
          "Name": "get_id",
          "Desc": "Get the shot's identifier, an integer which uniquely identifies the shot within the timeline. The id is persistent, remaining constant even if the scene containing the shot is closed and reopened. ",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "int",
            "Desc": "The shot's unique identifier."
          }
        }, 
        {
          "Name": "get_start_frame",
          "Desc": "Get the start frame of the shot within the scene which contains it. Because the time extent of a shot is actually defined by the shot's top strip, the start frame is actually the start frame of the top strip.",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "float",
            "Desc": "Start frame of the shot (inclusive)."
          }
        }, 
        {
          "Name": "get_end_frame",
          "Desc": "Get the end frame of the shot within the scene which contains it. Because the time extent of a shot is defined by the shot's top strip, the end frame is actually the end frame of the top strip. In Baselight, shot extents are defined in floating-point frames and are start-inclusive and end-exclusive. This means that the shot goes all the way up to the beginning of the end frame, but doesn't include it.   So a 5-frame shot  starting at frame 100.0 would have an end frame 105.0 and 104.75, 104.9 and 104.99999 would all lie within the shot.",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "float",
            "Desc": "End frame of the shot (exclusive)."
          }
        }, 
        {
          "Name": "get_poster_frame",
          "Desc": "Get the poster frame of the shot within the scene that contains it. ",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "float",
            "Desc": "Poster frame number of the shot."
          }
        }, 
        {
          "Name": "get_start_timecode",
          "Desc": "Get the start record timecode of the shot",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "timecode",
            "Desc": "Start record timecode of the shot"
          }
        }, 
        {
          "Name": "get_end_timecode",
          "Desc": "Get the end record timecode of the shot",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "timecode",
            "Desc": "End record timecode of the shot (exclusive)"
          }
        }, 
        {
          "Name": "get_timecode_at_frame",
          "Desc": "Get the record timecode at the given frame within the shot",
          "Static": null,
          "Args": [ 
            {
              "Name": "frame",
              "Type": "int",
              "Desc": "Frame relative to start of shot",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "timecode",
            "Desc": "Record timecode for frame"
          }
        }, 
        {
          "Name": "get_src_start_frame",
          "Desc": "Return start frame number within source sequence/movie",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "int",
            "Desc": "Frame number"
          }
        }, 
        {
          "Name": "get_src_end_frame",
          "Desc": "Return end frame number within source sequence/movie (exclusive)",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "int",
            "Desc": "Frame number"
          }
        }, 
        {
          "Name": "get_src_start_timecode",
          "Desc": "Return start timecode within source sequence/movie",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "timecode",
            "Desc": "Start source timecode"
          }
        }, 
        {
          "Name": "get_src_end_timecode",
          "Desc": "Return end timecode within source sequence/movie (exclusive)",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "timecode",
            "Desc": "End source timecode"
          }
        }, 
        {
          "Name": "get_src_timecode_at_frame",
          "Desc": "Return source timecode at the given frame within the shot",
          "Static": null,
          "Args": [ 
            {
              "Name": "frame",
              "Type": "int",
              "Desc": "Frame number relative to start of shot",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "timecode",
            "Desc": "Timecode for given frame"
          }
        }, 
        {
          "Name": "get_src_start_keycode",
          "Desc": "Return start keycode within source sequence/movie",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "keycode",
            "Desc": "Start source keycode"
          }
        }, 
        {
          "Name": "get_src_end_keycode",
          "Desc": "Return end keycode within source sequence/movie (exclusive)",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "keycode",
            "Desc": "End source keycode"
          }
        }, 
        {
          "Name": "get_input_colour_space",
          "Desc": "Return the input colour space defined for this shot. Can be 'None', indicating no specific colour space defined. For RAW codecs, this may be 'auto' indicating that the input colour space will be determined by the SDK used to decode to the image data. In either case the actual input colour space can be determined by call get_actual_input_colour_space().",
          "Static": null,
          "Args": [ 
            {
              "Name": "eye",
              "Type": "string",
              "Desc": "Find input colour space for the given eye in a stereo sequence",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "string",
            "Desc": "Colour space name, or 'auto'"
          }
        }, 
        {
          "Name": "set_input_colour_space",
          "Desc": "Set the input colour space",
          "Static": null,
          "Args": [ 
            {
              "Name": "name",
              "Type": "string",
              "Desc": "Input colour space name, or 'Auto'",
              "Nullable": 0
            }, 
            {
              "Name": "eye",
              "Type": "string",
              "Desc": "Input colour space for the given eye in a stereo sequence",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "get_actual_input_colour_space",
          "Desc": "Return the input colour space for this shot. If the input colour space is set to 'Auto', the actual colour space name will be returned.",
          "Static": null,
          "Args": [ 
            {
              "Name": "eye",
              "Type": "string",
              "Desc": "Input colour space for the given eye in a stereo sequence",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "string",
            "Desc": "Colour space name"
          }
        }, 
        {
          "Name": "get_input_format",
          "Desc": "Return the input format name for this shot",
          "Static": null,
          "Args": [ 
            {
              "Name": "eye",
              "Type": "string",
              "Desc": "Input colour space for the given eye in a stereo sequence",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "string",
            "Desc": "Format name"
          }
        }, 
        {
          "Name": "set_input_format",
          "Desc": "Set the input format name for this shot",
          "Static": null,
          "Args": [ 
            {
              "Name": "name",
              "Type": "string",
              "Desc": "Format name",
              "Nullable": 0
            }, 
            {
              "Name": "eye",
              "Type": "string",
              "Desc": "Input colour space for the given eye in a stereo sequence",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "get_input_video_lut",
          "Desc": "Return the input video lut value for this shot",
          "Static": null,
          "Args": [ 
            {
              "Name": "eye",
              "Type": "string",
              "Desc": "Input video LUT for the given eye in a stereo sequence",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "string",
            "Desc": "Input Video LUT (either VIDEOLUT_NONE or VIDEOLUT_UNSCALE) or NULL/None/null if an input video LUT is inappropriate for the shot's current media type and input colour space settings (indicated by the \"Legal to Full Scale\" button not being present in the Baselight Sequence operator UI."
          }
        }, 
        {
          "Name": "set_input_video_lut",
          "Desc": "Set the input video LUT for this shot",
          "Static": null,
          "Args": [ 
            {
              "Name": "video_lut",
              "Type": "string",
              "Desc": "Video LUT to be applied to the input sequence. The only permitted values for this method are VIDEOLUT_UNSCALE and VIDEOLUT_NONE.",
              "Nullable": 0
            }, 
            {
              "Name": "eye",
              "Type": "string",
              "Desc": "Input video LUT for the given eye in a stereo sequence",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "get_metadata",
          "Desc": "Get metadata values for the keys provided. The possible keys and the value type for each key are obtained using the Scene.get_metadata_definitions method.",
          "Static": null,
          "Args": [ 
            {
              "Name": "md_keys",
              "Type": "set",
              "Desc": "Set of metadata keys whose values are required.",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "struct",
            "Desc": "Key/value pairs containing the metadata obtained."
          }
        }, 
        {
          "Name": "get_metadata_strings",
          "Desc": "Get metadata values expressed as strings for the keys provided. The possible keys are obtained using the Scene.get_metadata_definitions method.",
          "Static": null,
          "Args": [ 
            {
              "Name": "md_keys",
              "Type": "set",
              "Desc": "Set of metadata keys whose values are required.",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "struct",
            "Desc": "Key/value pairs containing the metadata obtained. All the values will have been converted to strings."
          }
        }, 
        {
          "Name": "set_metadata",
          "Desc": "Set metadata values for the keys provided. The possible keys and the value type for each key are obtained using the Scene.get_metadata_definitions method.",
          "Static": null,
          "Args": [ 
            {
              "Name": "metadata",
              "Type": "struct",
              "Desc": "Key/value pairs of metadata to assign in the shot.",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "get_sequence_descriptor",
          "Desc": "Get a SequenceDescriptor object that represents the input media for this shot.",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "SequenceDescriptor",
            "Desc": "Object containing information about the shot's input media."
          }
        }, 
        {
          "Name": "get_client_event_list",
          "Desc": "Get array of client events (notes/flags) for this shot. The array is chronologically sorted (oldest first). Each event entry is a dictionary describing the event.",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "array",
            "Desc": "Array of client events for the shot."
          }
        }, 
        {
          "Name": "add_client_note",
          "Desc": "Add a client note to this shot's client event list.",
          "Static": null,
          "Args": [ 
            {
              "Name": "client_name",
              "Type": "string",
              "Desc": "Name of client adding the note.",
              "Nullable": 0
            }, 
            {
              "Name": "note_text",
              "Type": "string",
              "Desc": "Note text.",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "int",
            "Desc": "Event list identifier which can be used to edit/delete the note later."
          }
        }, 
        {
          "Name": "add_client_flag",
          "Desc": "Add a new client flag entry to this shot's client data event list. A shot's event list only supports a single flag event for a given client name; If one already exists, a call to this method will replace it with a new one. ",
          "Static": null,
          "Args": [ 
            {
              "Name": "client_name",
              "Type": "string",
              "Desc": "Name of client flagging the shot.",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "int",
            "Desc": "Event list identifier which can be used to remove the flag later."
          }
        }, 
        {
          "Name": "delete_client_event",
          "Desc": "Delete the (note or flag) event with the supplied id from the shot's client event list.",
          "Static": null,
          "Args": [ 
            {
              "Name": "event_id",
              "Type": "string",
              "Desc": "Event list identifier of event to delete.",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "int",
            "Desc": "1 on success, 0 if no event found."
          }
        }, 
        {
          "Name": "get_num_marks",
          "Desc": "Get number of marks within shot. If type is supplied, only return number of marks of the given type",
          "Static": null,
          "Args": [ 
            {
              "Name": "type",
              "Type": "string",
              "Desc": "Mark type",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "int",
            "Desc": "Number of marks"
          }
        }, 
        {
          "Name": "get_mark_ids",
          "Desc": "Get shot mark ids within the shot. Shot marks are marks which are attached to the shot's top strip. If type is specified, only return marks of matching type.",
          "Static": null,
          "Args": [ 
            {
              "Name": "offset",
              "Type": "int",
              "Desc": "Offset into array of marks",
              "Nullable": 0
            }, 
            {
              "Name": "count",
              "Type": "int",
              "Desc": "Number of marks to fetch, pass -1 to fetch all",
              "Nullable": 0
            }, 
            {
              "Name": "type",
              "Type": "string",
              "Desc": "Mark type, which is a category name. Only shot marks of this type will be returned. If not provided, all marks within the shot will be returned. Possible categories for marks can be obtained using the Scene.get_mark_categories method.",
              "Nullable": 1
            }, 
            {
              "Name": "eye",
              "Type": "string",
              "Desc": "Which eye to get marks for stereo sequence",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "array",
            "Desc": "Array of Mark IDs"
          }
        }, 
        {
          "Name": "get_mark",
          "Desc": "Get Mark object for given ID",
          "Static": null,
          "Args": [ 
            {
              "Name": "id",
              "Type": "int",
              "Desc": "Mark ID",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "Mark",
            "Desc": "Mark object"
          }
        }, 
        {
          "Name": "add_mark",
          "Desc": "Add new Mark to the shot at the given source frame",
          "Static": null,
          "Args": [ 
            {
              "Name": "frame",
              "Type": "int",
              "Desc": "Source frame number",
              "Nullable": 0
            }, 
            {
              "Name": "category",
              "Type": "string",
              "Desc": "Mark category",
              "Nullable": 0
            }, 
            {
              "Name": "note",
              "Type": "string",
              "Desc": "Mark note text",
              "Nullable": 1
            }, 
            {
              "Name": "eye",
              "Type": "string",
              "Desc": "Which eye to add mark for in stereo sequence",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "int",
            "Desc": "Mark ID"
          }
        }, 
        {
          "Name": "delete_mark",
          "Desc": "Delete the Mark object with the given mark ID",
          "Static": null,
          "Args": [ 
            {
              "Name": "id",
              "Type": "int",
              "Desc": "Mark ID",
              "Nullable": 0
            }, 
            {
              "Name": "eye",
              "Type": "string",
              "Desc": "Which eye to delete mark for in stereo sequence",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "get_categories",
          "Desc": "Get the set of categories assigned to this shot.",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "set",
            "Desc": "Set of category keys. The Scene.get_category method can be used to obtain information (such as the UI colour and user-readable name) about a given category key."
          }
        }, 
        {
          "Name": "set_categories",
          "Desc": "Set the categories assigned to this shot",
          "Static": null,
          "Args": [ 
            {
              "Name": "categories",
              "Type": "set",
              "Desc": "Set of category keys to be assigned to the shot.",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "insert_blg_stack",
          "Desc": "Insert a BLG stack at the bottom of the shot.",
          "Static": null,
          "Args": [ 
            {
              "Name": "blg_path",
              "Type": "string",
              "Desc": "Path to the BLG to be applied to the shot.",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "get_blg_payload",
          "Desc": "Returns the BLG payload for this shot.",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "string",
            "Desc": "String containing the payload."
          }
        }, 
        {
          "Name": "apply_blg_payload",
          "Desc": "Insert a BLG stack at the bottom of the shot.",
          "Static": null,
          "Args": [ 
            {
              "Name": "blg_payload",
              "Type": "string",
              "Desc": "A BLG payload as returned by get_blg_payload().",
              "Nullable": 0
            }, 
            {
              "Name": "blg_resources",
              "Type": "string",
              "Desc": "BLG resources as returned by get_blg_resources().",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "get_blg_resources",
          "Desc": "Returns the BLG resources for this shot.",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "string",
            "Desc": "String containing the resources."
          }
        }, 
        {
          "Name": "insert_basegrade_layer",
          "Desc": "Insert a BaseGrade layer at the bottom of the stack.",
          "Static": null,
          "Args": [ 
            {
              "Name": "values",
              "Type": "struct",
              "Desc": "A dictionary containing new values for the given  BaseGrade parameters.  Valid keys are  BalanceExposure, BalanceA, BalanceB,  Flare,  Saturation,  Contrast,  LightExposure, LightA, LightB,  DimExposure, DimA, DimB,  BrightExposure, BrightA, BrightB,  DarkExposure, DarkA, DarkB,  ContrastPivot,  LightPivot, LightFalloff,  DimPivot, DimFalloff,  BrightPivot, BrightFalloff,  DarkPivot, DarkFalloff,  LightSaturation,  DimSaturation,  BrightSaturation,  DarkSaturation",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "insert_cdl_layer",
          "Desc": "Insert a CDLGrade layer at the bottom of the shot.",
          "Static": null,
          "Args": [ 
            {
              "Name": "cdl_values",
              "Type": "array",
              "Desc": "CDL values (Slope R, Slope G, Slope B, Offset R, Offset G, Offset B, Power R, Power G, Power B, Saturation).",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "insert_cdl_layer_above",
          "Desc": "Insert a CDLGrade layer at the top of the shot.",
          "Static": null,
          "Args": [ 
            {
              "Name": "cdl_values",
              "Type": "array",
              "Desc": "CDL values (Slope R, Slope G, Slope B, Offset R, Offset G, Offset B, Power R, Power G, Power B, Saturation).",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "insert_look_layer",
          "Desc": "Insert a Look kayer at the bottom of the shot.",
          "Static": null,
          "Args": [ 
            {
              "Name": "look_name",
              "Type": "string",
              "Desc": "Name of the Look to be inserted.",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "insert_truelight_layer",
          "Desc": "Insert a Truelight layer at the bottom of the shot. The Truelight operator is used for applying 1D and 3D LUTs to an image.",
          "Static": null,
          "Args": [ 
            {
              "Name": "lut_path",
              "Type": "string",
              "Desc": "Path to the LUT file to be set in the newly created Truelight operator.",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "insert_shape_layer_from_svg",
          "Desc": "Insert a layer with a shape strip populated from an SVG file at the bottom of the shot.",
          "Static": null,
          "Args": [ 
            {
              "Name": "svg_path",
              "Type": "string",
              "Desc": "Path to the SVG file used to populate the layer's shape strip.",
              "Nullable": 0
            }, 
            {
              "Name": "fit_mode",
              "Type": "string",
              "Desc": "Controls how an SVG is transformed/fitted into the shape strip.",
              "Nullable": 0
            }, 
            {
              "Name": "mask_format",
              "Type": "string",
              "Desc": "Fit to this format and mask (supplied in 'mask_name' parameter). If set, the SVG will be transformed/fitted to this format's mask area mapped to the working format area. If none supplied, the SVG will be transformed/fitted to the entire working format area.",
              "Nullable": 0
            }, 
            {
              "Name": "mask_name",
              "Type": "string",
              "Desc": "Mask name (from the 'mask_format'). This may be used to further constrain fitting of the SVG to the working format area (see above).",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "insert_colour_space_layer",
          "Desc": "Insert a ColourSpace operator at the bottom of the stack for this shot",
          "Static": null,
          "Args": [ 
            {
              "Name": "toColourSpace",
              "Type": "string",
              "Desc": "Name of Output Colour Space",
              "Nullable": 0
            }, 
            {
              "Name": "drt",
              "Type": "string",
              "Desc": "Name of DRT to use when converting between scene-referred and display-referred colour spaces. Default is 'scene' which uses Scene's current Display Render Transform.",
              "Nullable": 0
            }, 
            {
              "Name": "identify",
              "Type": "int",
              "Desc": "Set to 1 to indicate the Colour Space operator is being used to tag/identify the colour space at this point in the stack, without any colour conversions. This would be applicable when using the Colour Space operator after a Truelight operator.",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "insert_lut_layer",
          "Desc": "Insert a LUT operator at the bottom of the stack for this shot",
          "Static": null,
          "Args": [ 
            {
              "Name": "location",
              "Type": "string",
              "Desc": "Specify where LUT data is stored.",
              "Nullable": 0
            }, 
            {
              "Name": "file",
              "Type": "string",
              "Desc": "Path to LUT file. You can use %C/ to use a path relative to the Scene's container.",
              "Nullable": 1
            }, 
            {
              "Name": "inputColourSpace",
              "Type": "string",
              "Desc": "Name of Input Colour Space for this LUT.",
              "Nullable": 0
            }, 
            {
              "Name": "outputColourSpace",
              "Type": "string",
              "Desc": "Name of Output Colour Space for this LUT",
              "Nullable": 0
            }, 
            {
              "Name": "inputLegalRange",
              "Type": "int",
              "Desc": "Flag indicating that input to LUT is expected to be video-legal range. Defautls to 0 to indicate full-range.",
              "Nullable": 0
            }, 
            {
              "Name": "outputLegalRange",
              "Type": "int",
              "Desc": "Flag indicating that output of LUT is video-legal range. Defaults to 0 to indicate full-range.",
              "Nullable": 0
            }, 
            {
              "Name": "tetrahedral",
              "Type": "int",
              "Desc": "Flag indicating that high-quality tetrahedral interpolation should be used.",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "delete_all_layers",
          "Desc": "Remove all layers from the shot.",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }, 
        {
          "Name": "get_codec",
          "Desc": "Method to obtain the codec of the input media of the shot.",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "string",
            "Desc": "A short string containing the codec name, or NULL if the codec couldn't be determined."
          }
        }, 
        {
          "Name": "get_decode_parameter_types",
          "Desc": "Return list of supported decode parameter codec keys",
          "Static": 1,
          "Args": {

          },
          "Result": {
            "Type": "array",
            "Desc": "Array of supported decode parameter codec keys"
          }
        }, 
        {
          "Name": "get_decode_parameter_type_for_codec",
          "Desc": "Return the key identifying the decode parameters type to use for the given video codec",
          "Static": 1,
          "Args": [ 
            {
              "Name": "codec",
              "Type": "string",
              "Desc": "Name of codec",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "string",
            "Desc": "Decode Parameter type key"
          }
        }, 
        {
          "Name": "get_decode_parameter_definitions",
          "Desc": "Static method called to obtain the image decode parameter definitions for a given codec. The decode parameters are used to control how an RGBA image is generated from RAW formats like ARRIRAW, R3D etc.   This method returns an array of image decode parameter definitions for a given decode parameter type, one per parameter. Each parameter definition is a collection of key/value pairs, with different entries dependent on the type of parameter. ",
          "Static": 1,
          "Args": [ 
            {
              "Name": "decode_type",
              "Type": "string",
              "Desc": "Type of decode parameter definitions to be obtained",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "array",
            "Desc": "An array containing parameter definitions as defined above."
          }
        }, 
        {
          "Name": "get_decode_parameters",
          "Desc": "This method returns the image decode parameters for the shot.",
          "Static": null,
          "Args": {

          },
          "Result": {
            "Type": "struct",
            "Desc": "Key/value pairs containing the current decode parameters. The meaning of the various keys can be discovered using the Shot.get_decode_parameter_definitions static method."
          }
        }, 
        {
          "Name": "set_decode_parameters",
          "Desc": "Set some or all of the image decode parameters for the shot.",
          "Static": null,
          "Args": [ 
            {
              "Name": "decode_params",
              "Type": "struct",
              "Desc": "Key/value pairs containing new decode parameter values. The allowable keys and valid values for those keys can be discovered using the get_decode_parameter_definitions static method. It is not necessary to specify all the parameters - any parameters not set will remain untouched.",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "none",
            "Desc": null
          }
        }
      ],
      "URIs": null
    }, 
    {
      "Name": "ThumbnailManager",
      "Desc": null,
      "Signals": [ 
        
      ],
      "Methods": [ 
        {
          "Name": "get_poster_uri",
          "Desc": "Get a poster (or specific) frame thumbnail URI for a shot",
          "Static": 1,
          "Args": [ 
            {
              "Name": "client",
              "Type": "context",
              "Desc": null,
              "Nullable": 0
            }, 
            {
              "Name": "shot_if",
              "Type": "Shot",
              "Desc": "Shot interface object",
              "Nullable": 0
            }, 
            {
              "Name": "options",
              "Type": "struct",
              "Desc": "Stucture containing optional settings used to control the type of thumbnail image rendered.",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "string",
            "Desc": "Thumbnail URI"
          }
        }, 
        {
          "Name": "get_scrub_uri_template",
          "Desc": "Get a scrub image URI template (prefix & suffix strings). This can be used while scrubbing to generate image URIs without additional roundtrips/calls to the server.",
          "Static": 1,
          "Args": [ 
            {
              "Name": "client",
              "Type": "context",
              "Desc": null,
              "Nullable": 0
            }, 
            {
              "Name": "scene_if",
              "Type": "Scene",
              "Desc": "Scene interface object",
              "Nullable": 0
            }, 
            {
              "Name": "shot_id",
              "Type": "Shot",
              "Desc": "ID of shot in scene",
              "Nullable": 0
            }, 
            {
              "Name": "options",
              "Type": "struct",
              "Desc": "Stucture containing optional settings used to control the type of scrub image rendered.",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "array",
            "Desc": "Template array containing 2 strings; a URI prefix & suffix. To form a completeURI, the scrub frame number required should be inserted between these 2 strings."
          }
        }
      ],
      "URIs": null
    }, 
    {
      "Name": "Utilities",
      "Desc": null,
      "Signals": [ 
        
      ],
      "Methods": [ 
        {
          "Name": "timecode_from_string",
          "Desc": "Convert string to Timecode",
          "Static": 1,
          "Args": [ 
            {
              "Name": "str",
              "Type": "string",
              "Desc": "Timecode in string form",
              "Nullable": 0
            }, 
            {
              "Name": "fps",
              "Type": "int",
              "Desc": "FPS",
              "Nullable": 1
            }, 
            {
              "Name": "wraphour",
              "Type": "int",
              "Desc": "Hour at which timecode is considered to wrap around, defaults to 24. Set this to 0 to disable timecode wrapping.",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "timecode",
            "Desc": "Timecode parsed from string"
          }
        }, 
        {
          "Name": "get_allowed_enum_values",
          "Desc": "Returns an array of EnumInfo objects representing the allowed values for a given enumeration type.  Explictly, each returned entry has two fields: * Value - The (unique) internal value. * Desc - The user-friendly description for the value (so that you would typically present Desc to the user and use Value in calls to FLAPI functions). ",
          "Static": 1,
          "Args": [ 
            {
              "Name": "enumType",
              "Type": "string",
              "Desc": "The name of the enumerated type.  e.g. CUBEEXPORT_LUTFORMAT",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "array",
            "Desc": "Array of EnumInfo objects"
          }
        }
      ],
      "URIs": null
    }, 
    {
      "Name": "Volumes",
      "Desc": null,
      "Signals": [ 
        
      ],
      "Methods": [ 
        {
          "Name": "get_volume_keys",
          "Desc": "Return keys for volumes accessible from this system",
          "Static": 1,
          "Args": {

          },
          "Result": {
            "Type": "array",
            "Desc": "Array of volume keys"
          }
        }, 
        {
          "Name": "get_local_volume_keys",
          "Desc": "Return volumes defined locally on this system",
          "Static": 1,
          "Args": {

          },
          "Result": {
            "Type": "array",
            "Desc": "Array of volume keys"
          }
        }, 
        {
          "Name": "get_volume_info",
          "Desc": "Return VolumeInfo describing the volume with the given key",
          "Static": 1,
          "Args": [ 
            {
              "Name": "keys",
              "Type": "array",
              "Desc": "Array of volume keys",
              "Nullable": 0
            }
          ],
          "Result": {
            "Type": "VolumeInfo",
            "Desc": ""
          }
        }
      ],
      "URIs": null
    }
  ],
  "Constants": [ 
    {
      "Name": "AUDIO_RATE",
      "Type": "int",
      "Enum": 1,
      "Value": null,
      "Desc": "Audio Sample Rate",
      "Values": [ 
        {
          "Desc": "44.1 kHz",
          "Key": "AUDIO_RATE_44100",
          "Value": 44100
        }, 
        {
          "Desc": "48 kHz",
          "Key": "AUDIO_RATE_48000",
          "Value": 48000
        }, 
        {
          "Desc": "96 kHz",
          "Key": "AUDIO_RATE_96000",
          "Value": 96000
        }
      ]
    }, 
    {
      "Name": "BLGEXPORT_LOCKGRADE",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Values for BLGExportSettings LockGrade",
      "Values": [ 
        {
          "Desc": "No",
          "Key": "BLGEXPORT_LOCKGRADE_READWRITE",
          "Value": "ReadWrite"
        }, 
        {
          "Desc": "Yes",
          "Key": "BLGEXPORT_LOCKGRADE_LOCKED",
          "Value": "Locked"
        }
      ]
    }, 
    {
      "Name": "BLGEXPORT_SCALE",
      "Type": "int",
      "Enum": 1,
      "Value": null,
      "Desc": "Values for BLGExportSettings Scale",
      "Values": [ 
        {
          "Desc": "Full",
          "Key": "BLGEXPORT_SCALE_1",
          "Value": 1
        }, 
        {
          "Desc": "Half",
          "Key": "BLGEXPORT_SCALE_2",
          "Value": 2
        }, 
        {
          "Desc": "Quarter",
          "Key": "BLGEXPORT_SCALE_4",
          "Value": 4
        }, 
        {
          "Desc": "Sixteenth",
          "Key": "BLGEXPORT_SCALE_16",
          "Value": 16
        }
      ]
    }, 
    {
      "Name": "BURNIN_BORDER",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Define border type for burnin text item",
      "Values": [ 
        {
          "Desc": "No border",
          "Key": "BURNIN_BORDER_NONE",
          "Value": "none"
        }, 
        {
          "Desc": "Rectangle",
          "Key": "BURNIN_BORDER_RECTANGLE",
          "Value": "rect"
        }, 
        {
          "Desc": "Lozenge",
          "Key": "BURNIN_BORDER_LOZENGE",
          "Value": "loz"
        }
      ]
    }, 
    {
      "Name": "BURNIN_HALIGN",
      "Type": "int",
      "Enum": 1,
      "Value": null,
      "Desc": "Define horizontal alignment of burnin text item",
      "Values": [ 
        {
          "Desc": "Left aligned",
          "Key": "BURNIN_HALIGN_LEFT",
          "Value": 0
        }, 
        {
          "Desc": "Center aligned",
          "Key": "BURNIN_HALIGN_CENTER",
          "Value": 1
        }, 
        {
          "Desc": "Right aligned",
          "Key": "BURNIN_HALIGN_RIGHT",
          "Value": 2
        }
      ]
    }, 
    {
      "Name": "BURNIN_ITEM_TYPE",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Specify burnin item type",
      "Values": [ 
        {
          "Desc": "Text item",
          "Key": "BURNIN_ITEM_TEXT",
          "Value": "text"
        }, 
        {
          "Desc": "Image item",
          "Key": "BURNIN_ITEM_IMAGE",
          "Value": "image"
        }
      ]
    }, 
    {
      "Name": "BURNIN_VALIGN",
      "Type": "int",
      "Enum": 1,
      "Value": null,
      "Desc": "Define vertical alignment of burnin text item",
      "Values": [ 
        {
          "Desc": "Top aligned",
          "Key": "BURNIN_VALIGN_TOP",
          "Value": 0
        }, 
        {
          "Desc": "Middle aligned",
          "Key": "BURNIN_VALIGN_MIDDLE",
          "Value": 1
        }, 
        {
          "Desc": "Bottom aligned",
          "Key": "BURNIN_VALIGN_BOTTOM",
          "Value": 2
        }
      ]
    }, 
    {
      "Name": "CDLEXPORT_CDLLAYER",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Values for CDLExportSettings CDLLayer",
      "Values": [ 
        {
          "Desc": "Top",
          "Key": "CDLEXPORT_CDLLAYER_TOP",
          "Value": "top"
        }, 
        {
          "Desc": "Bottom",
          "Key": "CDLEXPORT_CDLLAYER_BOTTOM",
          "Value": "bottom"
        }, 
        {
          "Desc": "Layer n",
          "Key": "CDLEXPORT_CDLLAYER_CUSTOM",
          "Value": "custom"
        }
      ]
    }, 
    {
      "Name": "CDLEXPORT_FORMAT",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Values for CDLExportSettings Format",
      "Values": [ 
        {
          "Desc": ".cc file\tColor Correction, one correction per file",
          "Key": "CDLEXPORT_FORMAT_CC",
          "Value": "CC"
        }, 
        {
          "Desc": ".ccc file\tColor Correction Collection, all corrections in one file",
          "Key": "CDLEXPORT_FORMAT_CCC",
          "Value": "CCC"
        }
      ]
    }, 
    {
      "Name": "CUBEEXPORT_CUBERESOLUTION",
      "Type": "int",
      "Enum": 1,
      "Value": null,
      "Desc": "Values for CubeExportSettings CubeResolution",
      "Values": [ 
        {
          "Desc": "Default",
          "Key": "CUBEEXPORT_CUBERESOLUTION_DEFAULT",
          "Value": -1
        }, 
        {
          "Desc": "16x16x16",
          "Key": "CUBEEXPORT_CUBERESOLUTION_16",
          "Value": 16
        }, 
        {
          "Desc": "17x17x17",
          "Key": "CUBEEXPORT_CUBERESOLUTION_17",
          "Value": 17
        }, 
        {
          "Desc": "32x32x32",
          "Key": "CUBEEXPORT_CUBERESOLUTION_32",
          "Value": 32
        }, 
        {
          "Desc": "33x33x33",
          "Key": "CUBEEXPORT_CUBERESOLUTION_33",
          "Value": 33
        }, 
        {
          "Desc": "64x64x64",
          "Key": "CUBEEXPORT_CUBERESOLUTION_64",
          "Value": 64
        }
      ]
    }, 
    {
      "Name": "CUBEEXPORT_EXTENDEDRANGES",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Values for CubeExportSettings ExtendedRanges",
      "Values": [ 
        {
          "Desc": "",
          "Key": "CUBEEXPORT_EXTENDEDRANGES_NO",
          "Value": "No"
        }, 
        {
          "Desc": "",
          "Key": "CUBEEXPORT_EXTENDEDRANGES_LINEAR",
          "Value": "Linear"
        }, 
        {
          "Desc": "",
          "Key": "CUBEEXPORT_EXTENDEDRANGES_LOG",
          "Value": "Log"
        }
      ]
    }, 
    {
      "Name": "CUBEEXPORT_LUT1OPTIONS",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Values for CubeExportSettings LUT1Options",
      "Values": [ 
        {
          "Desc": "Input Transform",
          "Key": "CUBEEXPORT_LUT1OPTIONS_INPUT",
          "Value": "Input"
        }, 
        {
          "Desc": "Grade",
          "Key": "CUBEEXPORT_LUT1OPTIONS_GRADE",
          "Value": "Grade"
        }, 
        {
          "Desc": "Output Transform",
          "Key": "CUBEEXPORT_LUT1OPTIONS_OUTPUT",
          "Value": "Output"
        }
      ]
    }, 
    {
      "Name": "CUBEEXPORT_LUT2OPTIONS",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Values for CubeExportSettings LUT2Options",
      "Values": [ 
        {
          "Desc": "Input Transform",
          "Key": "CUBEEXPORT_LUT2OPTIONS_INPUT",
          "Value": "Input"
        }, 
        {
          "Desc": "Grade",
          "Key": "CUBEEXPORT_LUT2OPTIONS_GRADE",
          "Value": "Grade"
        }, 
        {
          "Desc": "Output Transform",
          "Key": "CUBEEXPORT_LUT2OPTIONS_OUTPUT",
          "Value": "Output"
        }
      ]
    }, 
    {
      "Name": "CUBEEXPORT_LUT3OPTIONS",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Values for CubeExportSettings LUT3Options",
      "Values": [ 
        {
          "Desc": "Input Transform",
          "Key": "CUBEEXPORT_LUT3OPTIONS_INPUT",
          "Value": "Input"
        }, 
        {
          "Desc": "Grade",
          "Key": "CUBEEXPORT_LUT3OPTIONS_GRADE",
          "Value": "Grade"
        }, 
        {
          "Desc": "Output Transform",
          "Key": "CUBEEXPORT_LUT3OPTIONS_OUTPUT",
          "Value": "Output"
        }
      ]
    }, 
    {
      "Name": "CUBEEXPORT_LUTFORMAT",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Values for CubeExportSettings LUTFormat",
      "Values": [ 
        {
          "Desc": "Truelight cube",
          "Key": "CUBEEXPORT_LUTFORMAT_TRUELIGHT",
          "Value": "Truelight"
        }, 
        {
          "Desc": "Truelight 1D",
          "Key": "CUBEEXPORT_LUTFORMAT_TRUELIGHT_1D",
          "Value": "Truelight_1D"
        }, 
        {
          "Desc": "AMIRA",
          "Key": "CUBEEXPORT_LUTFORMAT_AMIRA",
          "Value": "AMIRA"
        }, 
        {
          "Desc": "Arri",
          "Key": "CUBEEXPORT_LUTFORMAT_ARRI",
          "Value": "Arri"
        }, 
        {
          "Desc": "Autodesk",
          "Key": "CUBEEXPORT_LUTFORMAT_AUTODESK",
          "Value": "Autodesk"
        }, 
        {
          "Desc": "Autodesk 1D",
          "Key": "CUBEEXPORT_LUTFORMAT_AUTODESK_1D",
          "Value": "Autodesk_1D"
        }, 
        {
          "Desc": "Autodesk 1D half float",
          "Key": "CUBEEXPORT_LUTFORMAT_AUTODESK_1DF",
          "Value": "Autodesk_1Df"
        }, 
        {
          "Desc": "Autodesk Lustre (Mesh)",
          "Key": "CUBEEXPORT_LUTFORMAT_AUTODESK_MESH",
          "Value": "Autodesk_Mesh"
        }, 
        {
          "Desc": "Autodesk CTF",
          "Key": "CUBEEXPORT_LUTFORMAT_AUTODESK_CTF",
          "Value": "Autodesk_ctf"
        }, 
        {
          "Desc": "BMD",
          "Key": "CUBEEXPORT_LUTFORMAT_BMD",
          "Value": "BMD"
        }, 
        {
          "Desc": "Barco",
          "Key": "CUBEEXPORT_LUTFORMAT_BARCO",
          "Value": "Barco"
        }, 
        {
          "Desc": "BlackMagic",
          "Key": "CUBEEXPORT_LUTFORMAT_BLACKMAGIC",
          "Value": "BlackMagic"
        }, 
        {
          "Desc": "BlackMagic 1D",
          "Key": "CUBEEXPORT_LUTFORMAT_BLACKMAGIC_1D",
          "Value": "BlackMagic_1D"
        }, 
        {
          "Desc": "Canon gamma 1D",
          "Key": "CUBEEXPORT_LUTFORMAT_CANON_1D",
          "Value": "Canon_1D"
        }, 
        {
          "Desc": "Canon gamut 3D",
          "Key": "CUBEEXPORT_LUTFORMAT_CANON_3D",
          "Value": "Canon_3D"
        }, 
        {
          "Desc": "CineSpace",
          "Key": "CUBEEXPORT_LUTFORMAT_CINESPACE",
          "Value": "CineSpace"
        }, 
        {
          "Desc": "Colorfront 1D",
          "Key": "CUBEEXPORT_LUTFORMAT_COLORFRONT_1D",
          "Value": "Colorfront_1D"
        }, 
        {
          "Desc": "Colorfront 3D",
          "Key": "CUBEEXPORT_LUTFORMAT_COLORFRONT_3D",
          "Value": "Colorfront_3D"
        }, 
        {
          "Desc": "DVS",
          "Key": "CUBEEXPORT_LUTFORMAT_DVS",
          "Value": "DVS"
        }, 
        {
          "Desc": "DVS 1D",
          "Key": "CUBEEXPORT_LUTFORMAT_DVS_1D",
          "Value": "DVS_1D"
        }, 
        {
          "Desc": "DaVinci",
          "Key": "CUBEEXPORT_LUTFORMAT_DAVINCI",
          "Value": "DaVinci"
        }, 
        {
          "Desc": "Evertz",
          "Key": "CUBEEXPORT_LUTFORMAT_EVERTZ",
          "Value": "Evertz"
        }, 
        {
          "Desc": "ICC",
          "Key": "CUBEEXPORT_LUTFORMAT_ICC",
          "Value": "ICC"
        }, 
        {
          "Desc": "IRIDAS",
          "Key": "CUBEEXPORT_LUTFORMAT_IRIDAS",
          "Value": "IRIDAS"
        }, 
        {
          "Desc": "IRIDAS 1D",
          "Key": "CUBEEXPORT_LUTFORMAT_IRIDAS_1D",
          "Value": "IRIDAS_1D"
        }, 
        {
          "Desc": "LUTher",
          "Key": "CUBEEXPORT_LUTFORMAT_LUTHER",
          "Value": "LUTher"
        }, 
        {
          "Desc": "Nucoda",
          "Key": "CUBEEXPORT_LUTFORMAT_NUCODA",
          "Value": "Nucoda"
        }, 
        {
          "Desc": "Panasonic",
          "Key": "CUBEEXPORT_LUTFORMAT_PANASONIC",
          "Value": "Panasonic"
        }, 
        {
          "Desc": "Pandora",
          "Key": "CUBEEXPORT_LUTFORMAT_PANDORA",
          "Value": "Pandora"
        }, 
        {
          "Desc": "Quantel",
          "Key": "CUBEEXPORT_LUTFORMAT_QUANTEL",
          "Value": "Quantel"
        }, 
        {
          "Desc": "Quantel 65x65x65",
          "Key": "CUBEEXPORT_LUTFORMAT_QUANTEL_65",
          "Value": "Quantel_65"
        }, 
        {
          "Desc": "Scratch",
          "Key": "CUBEEXPORT_LUTFORMAT_SCRATCH",
          "Value": "Scratch"
        }, 
        {
          "Desc": "Sony",
          "Key": "CUBEEXPORT_LUTFORMAT_SONY",
          "Value": "Sony"
        }, 
        {
          "Desc": "Sony BVME",
          "Key": "CUBEEXPORT_LUTFORMAT_SONY_BVME",
          "Value": "Sony_BVME"
        }
      ]
    }, 
    {
      "Name": "CUBEEXPORT_LUTRESOLUTION",
      "Type": "int",
      "Enum": 1,
      "Value": null,
      "Desc": "Values for CubeExportSettings LUTResolution",
      "Values": [ 
        {
          "Desc": "Default",
          "Key": "CUBEEXPORT_LUTRESOLUTION_DEFAULT",
          "Value": -1
        }, 
        {
          "Desc": "",
          "Key": "CUBEEXPORT_LUTRESOLUTION_1024",
          "Value": 1024
        }, 
        {
          "Desc": "",
          "Key": "CUBEEXPORT_LUTRESOLUTION_4096",
          "Value": 4096
        }, 
        {
          "Desc": "",
          "Key": "CUBEEXPORT_LUTRESOLUTION_16384",
          "Value": 16384
        }
      ]
    }, 
    {
      "Name": "CUBEEXPORT_NUMLUTS",
      "Type": "int",
      "Enum": 1,
      "Value": null,
      "Desc": "Values for CubeExportSettings NumLUTs",
      "Values": [ 
        {
          "Desc": "",
          "Key": "CUBEEXPORT_NUMLUTS_1",
          "Value": 1
        }, 
        {
          "Desc": "",
          "Key": "CUBEEXPORT_NUMLUTS_2",
          "Value": 2
        }, 
        {
          "Desc": "",
          "Key": "CUBEEXPORT_NUMLUTS_3",
          "Value": 3
        }
      ]
    }, 
    {
      "Name": "DECODEPARAM_TYPE",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Data type for a DecodeParameterDefinition",
      "Values": [ 
        {
          "Desc": "Integer value",
          "Key": "DECODEPARAMTYPE_INTEGER",
          "Value": "Integer"
        }, 
        {
          "Desc": "Floating-point value",
          "Key": "DECODEPARAMTYPE_FLOAT",
          "Value": "Float"
        }, 
        {
          "Desc": "Boolean value, represented as 1 or 0",
          "Key": "DECODEPARAMTYPE_BOOLEAN",
          "Value": "Boolean"
        }, 
        {
          "Desc": "A choice for a set of discrete values",
          "Key": "DECODEPARAMTYPE_CHOICE",
          "Value": "Choice"
        }, 
        {
          "Desc": "Filename or path to a file",
          "Key": "DECODEPARAMTYPE_FILE",
          "Value": "File"
        }
      ]
    }, 
    {
      "Name": "DECODEQUALITY",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Decode Qulity to use for decoding source images for RAW codecs",
      "Values": [ 
        {
          "Desc": "Use highest quality RAW decode",
          "Key": "DECODEQUALITY_HIGH",
          "Value": "GMDQ_OPTIMISED_UNLESS_HIGH"
        }, 
        {
          "Desc": "Use nearest decode quality for render format/resolution",
          "Key": "DECODEQUALITY_OPTIMISED",
          "Value": "GMDQ_OPTIMISED"
        }, 
        {
          "Desc": "Use fastest decode quality",
          "Key": "DECODEQUALITY_DRAFT",
          "Value": "GMDQ_DRAFT"
        }
      ]
    }, 
    {
      "Name": "EXPORTSTATUS",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Status info related to Export progress",
      "Values": [ 
        {
          "Desc": "Failure during export operation",
          "Key": "EXPORTSTATUS_FAIL",
          "Value": "FAIL"
        }, 
        {
          "Desc": "Warning during export operation",
          "Key": "EXPORTSTATUS_WARN",
          "Value": "WARN"
        }, 
        {
          "Desc": "Info from export operation",
          "Key": "EXPORTSTATUS_INFO",
          "Value": "INFO"
        }, 
        {
          "Desc": "Note from export operation",
          "Key": "EXPORTSTATUS_NOTE",
          "Value": "NOTE"
        }, 
        {
          "Desc": "Filesystem scanning progress",
          "Key": "EXPORTSTATUS_SCAN",
          "Value": "SCAN"
        }
      ]
    }, 
    {
      "Name": "EXPORT_CATEGORYMATCH",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Values for Exporter CategoryMatch field",
      "Values": [ 
        {
          "Desc": "All Categories",
          "Key": "EXPORT_CATEGORYMATCH_ALL",
          "Value": "all"
        }, 
        {
          "Desc": "Any Category",
          "Key": "EXPORT_CATEGORYMATCH_ANY",
          "Value": "any"
        }
      ]
    }, 
    {
      "Name": "EXPORT_FRAMES",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Values for Exporter Frames field",
      "Values": [ 
        {
          "Desc": "First Frame",
          "Key": "EXPORT_FRAMES_FIRST",
          "Value": "First"
        }, 
        {
          "Desc": "Poster Frame",
          "Key": "EXPORT_FRAMES_POSTER",
          "Value": "Poster"
        }, 
        {
          "Desc": "Marked Frames",
          "Key": "EXPORT_FRAMES_MARKED",
          "Value": "Marked"
        }, 
        {
          "Desc": "Current Frame",
          "Key": "EXPORT_FRAMES_CURRENT",
          "Value": "Current"
        }
      ]
    }, 
    {
      "Name": "EXPORT_OVERWRITE",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Values for Exporter Overwrite field",
      "Values": [ 
        {
          "Desc": "",
          "Key": "EXPORT_OVERWRITE_SKIP",
          "Value": "Skip"
        }, 
        {
          "Desc": "",
          "Key": "EXPORT_OVERWRITE_REPLACE",
          "Value": "Replace"
        }
      ]
    }, 
    {
      "Name": "EXPORT_SOURCE",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Values for Exporter Source field",
      "Values": [ 
        {
          "Desc": "All Shots",
          "Key": "EXPORT_SOURCE_ALLSHOTS",
          "Value": "AllShots"
        }, 
        {
          "Desc": "Selected Shots",
          "Key": "EXPORT_SOURCE_SELECTEDSHOTS",
          "Value": "SelectedShots"
        }, 
        {
          "Desc": "Current Shot",
          "Key": "EXPORT_SOURCE_CURRENTSHOT",
          "Value": "CurrentShot"
        }, 
        {
          "Desc": "Shots in Filter",
          "Key": "EXPORT_SOURCE_SHOTSINFILTER",
          "Value": "ShotsInFilter"
        }, 
        {
          "Desc": "Shots of Category",
          "Key": "EXPORT_SOURCE_SHOTSOFCATEGORY",
          "Value": "ShotsOfCategory"
        }
      ]
    }, 
    {
      "Name": "EXPORT_STEREO",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Values for Exporter Stereo field",
      "Values": [ 
        {
          "Desc": "Current Eye",
          "Key": "EXPORT_STEREO_CURRENT",
          "Value": "Current"
        }, 
        {
          "Desc": "Left Eye",
          "Key": "EXPORT_STEREO_LEFT",
          "Value": "Left"
        }, 
        {
          "Desc": "Right Eye",
          "Key": "EXPORT_STEREO_RIGHT",
          "Value": "Right"
        }, 
        {
          "Desc": "Left & Right Eyes",
          "Key": "EXPORT_STEREO_BOTH",
          "Value": "Both"
        }, 
        {
          "Desc": "Single Stack Stereo (BLG exports only)",
          "Key": "EXPORT_STEREO_SINGLESTACKSTEREO",
          "Value": "SingleStackStereo"
        }
      ]
    }, 
    {
      "Name": "FIELDORDER",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Field order behaviour",
      "Values": [ 
        {
          "Desc": "Progressive",
          "Key": "FIELDORDER_PROGRESSIVE",
          "Value": "None"
        }, 
        {
          "Desc": "Upper-field first (PAL/SECAM)",
          "Key": "FIELDORDER_UPPER",
          "Value": "upper"
        }, 
        {
          "Desc": "Lower-field first (NTSC)",
          "Key": "FIELDORDER_LOWER",
          "Value": "lower"
        }
      ]
    }, 
    {
      "Name": "FORMATSET_SCOPE",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Defines the scope that a FormatSet is defined in",
      "Values": [ 
        {
          "Desc": "Factory formats built-in to the software",
          "Key": "FORMATSET_SCOPE_FACTORY",
          "Value": "factory"
        }, 
        {
          "Desc": "Global Formats from the global formats database",
          "Key": "FORMATSET_SCOPE_GLOBAL",
          "Value": "global"
        }, 
        {
          "Desc": "Formats defined for a given job in a database",
          "Key": "FORMATSET_SCOPE_JOB",
          "Value": "job"
        }, 
        {
          "Desc": "Formats defined for a given scene",
          "Key": "FORMATSET_SCOPE_SCENE",
          "Value": "scene"
        }
      ]
    }, 
    {
      "Name": "FSFILTER",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Type of items to return from Filesystem get_items method",
      "Values": [ 
        {
          "Desc": "Return files",
          "Key": "FSFILTER_FILE",
          "Value": "file"
        }, 
        {
          "Desc": "Return directories",
          "Key": "FSFILTER_DIR",
          "Value": "directory"
        }
      ]
    }, 
    {
      "Name": "IMAGETRANSFORM_MODE",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Specify filtering kernel to use for image resampling/transform operations",
      "Values": [ 
        {
          "Desc": "Adaptive",
          "Key": "IMAGETRANSFORM_ADAPTIVE",
          "Value": "adaptive-soft"
        }, 
        {
          "Desc": "Square Average (Box filter)",
          "Key": "IMAGETRANSFORM_BOX",
          "Value": "box"
        }, 
        {
          "Desc": "Circle average",
          "Key": "IMAGETRANSFORM_CIRCLE",
          "Value": "circle"
        }, 
        {
          "Desc": "Composite",
          "Key": "IMAGETRANSFORM_COMPOSITE",
          "Value": "composite"
        }, 
        {
          "Desc": "Fixed Cubic",
          "Key": "IMAGETRANSFORM_CUBIC",
          "Value": "cubic"
        }, 
        {
          "Desc": "Fixed Cubic Spline",
          "Key": "IMAGETRANSFORM_CUBIC_SPLINE",
          "Value": "cubic-spline"
        }, 
        {
          "Desc": "Fixed Lanczos 4-tap",
          "Key": "IMAGETRANSFORM_LANCZOS",
          "Value": "Lanczos"
        }, 
        {
          "Desc": "Fixed Lanczos 6-tap",
          "Key": "IMAGETRANSFORM_6LANCZOS",
          "Value": "6Lanczos"
        }, 
        {
          "Desc": "Fixed Quintic 6-tap",
          "Key": "IMAGETRANSFORM_6QUINTIC",
          "Value": "6quintic"
        }, 
        {
          "Desc": "Fixed Gaussian",
          "Key": "IMAGETRANSFORM_GAUSSIAN",
          "Value": "Gaussian"
        }, 
        {
          "Desc": "Fixed Catmull-Rom",
          "Key": "IMAGETRANSFORM_CATMULL_ROM",
          "Value": "Catmull-Rom"
        }, 
        {
          "Desc": "Fixed Simon",
          "Key": "IMAGETRANSFORM_SIMON",
          "Value": "Simon"
        }, 
        {
          "Desc": "Fixed Linear",
          "Key": "IMAGETRANSFORM_LINEAR",
          "Value": "linear"
        }, 
        {
          "Desc": "Fixed Nearest Pixel",
          "Key": "IMAGETRANSFORM_NEAREST",
          "Value": "nearest"
        }, 
        {
          "Desc": "Sharp Edge",
          "Key": "IMAGETRANSFORM_SHARPEDGE",
          "Value": "sharpEdge"
        }
      ]
    }, 
    {
      "Name": "INSERT_POSITION",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Specify where to insert a sequence in a Scene",
      "Values": [ 
        {
          "Desc": "Insert sequence at start of scene",
          "Key": "INSERT_START",
          "Value": "start"
        }, 
        {
          "Desc": "Insert sequence at end of scene",
          "Key": "INSERT_END",
          "Value": "end"
        }, 
        {
          "Desc": "Insert sequence before specified Shot",
          "Key": "INSERT_BEFORE",
          "Value": "before"
        }, 
        {
          "Desc": "Insert sequence after specified Shot",
          "Key": "INSERT_AFTER",
          "Value": "after"
        }, 
        {
          "Desc": "Insert sequence above specified Shot",
          "Key": "INSERT_ABOVE",
          "Value": "above"
        }, 
        {
          "Desc": "Insert sequence below specified Shot",
          "Key": "INSERT_BELOW",
          "Value": "below"
        }
      ]
    }, 
    {
      "Name": "LUT_LOCATION",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Specify where LUT data should be found for a LUT operator",
      "Values": [ 
        {
          "Desc": "LUT is stored in an external file",
          "Key": "LUTLOCATION_FILE",
          "Value": "file"
        }, 
        {
          "Desc": "LUT is embedded in source image file",
          "Key": "LUTLOCATION_EMBEDDED",
          "Value": "embedded"
        }
      ]
    }, 
    {
      "Name": "MARK_TYPE",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Used to distinguish between timeline, shot and strip marks",
      "Values": [ 
        {
          "Desc": "Timeline mark, position stored as time in seconds relative to start of timeline",
          "Key": "MARKTYPE_TIMELINE",
          "Value": "Timeline"
        }, 
        {
          "Desc": "Shot mark, position stored as source image frame number",
          "Key": "MARKTYPE_SHOT",
          "Value": "Shot"
        }, 
        {
          "Desc": "Strip mark, position stored as time in seconds relative to start of strip",
          "Key": "MARKTYPE_STRIP",
          "Value": "Strip"
        }
      ]
    }, 
    {
      "Name": "MULTIPASTESTATUS",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Status info related to Multi-Paste progress",
      "Values": [ 
        {
          "Desc": "Failure during multi-paste operation",
          "Key": "MULTIPASTESTATUS_FAIL",
          "Value": "FAIL"
        }, 
        {
          "Desc": "Warning during multi-paste operation",
          "Key": "MULTIPASTESTATUS_WARN",
          "Value": "WARN"
        }, 
        {
          "Desc": "Info from multi-paste operation",
          "Key": "MULTIPASTESTATUS_INFO",
          "Value": "INFO"
        }, 
        {
          "Desc": "Note from multi-paste operation",
          "Key": "MULTIPASTESTATUS_NOTE",
          "Value": "NOTE"
        }, 
        {
          "Desc": "Filesystem scanning progress",
          "Key": "MULTIPASTESTATUS_SCAN",
          "Value": "SCAN"
        }
      ]
    }, 
    {
      "Name": "MULTIPASTE_BLGRESOURCECONFLICT",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Values for MultiPasteSettings BLGResourceConflict",
      "Values": [ 
        {
          "Desc": "Replace Existing Resources with BLG Versions",
          "Key": "MULTIPASTE_BLGRESOURCECONFLICT_REPLACE",
          "Value": "Replace"
        }, 
        {
          "Desc": "Use Existing Resources with the Same Name",
          "Key": "MULTIPASTE_BLGRESOURCECONFLICT_ORIGINAL",
          "Value": "Original"
        }, 
        {
          "Desc": "Import BLG Resources Under a New Name",
          "Key": "MULTIPASTE_BLGRESOURCECONFLICT_RENAME",
          "Value": "Rename"
        }
      ]
    }, 
    {
      "Name": "MULTIPASTE_DESTSELECTION",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Values for MultiPasteSettings DestSelection",
      "Values": [ 
        {
          "Desc": "Timeline Stacks Containing a Selected Strip",
          "Key": "MULTIPASTE_DESTSELECTION_SELECTEDSTRIPS",
          "Value": "SelectedStrips"
        }, 
        {
          "Desc": "Selected Shots in Shots View/Cuts View",
          "Key": "MULTIPASTE_DESTSELECTION_SELECTEDSHOTS",
          "Value": "SelectedShots"
        }
      ]
    }, 
    {
      "Name": "MULTIPASTE_DESTSHOTS",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Values for MultiPasteSettings DestShots",
      "Values": [ 
        {
          "Desc": "Overwrite All",
          "Key": "MULTIPASTE_DESTSHOTS_OVERWRITEALL",
          "Value": "OverwriteAll"
        }, 
        {
          "Desc": "Overwrite All, Except Layers of Category",
          "Key": "MULTIPASTE_DESTSHOTS_OVERWRITEALLEXCEPTCATS",
          "Value": "OverwriteAllExceptCats"
        }, 
        {
          "Desc": "Retain All",
          "Key": "MULTIPASTE_DESTSHOTS_RETAINALL",
          "Value": "RetainAll"
        }, 
        {
          "Desc": "Retain All, Except Layers of Category",
          "Key": "MULTIPASTE_DESTSHOTS_RETAINALLEXCEPTCATS",
          "Value": "RetainAllExceptCats"
        }
      ]
    }, 
    {
      "Name": "MULTIPASTE_EDLAPPLYASCCDL",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Values for MultiPasteSettings EDLApplyASCCDL",
      "Values": [ 
        {
          "Desc": "",
          "Key": "MULTIPASTE_EDLAPPLYASCCDL_NO",
          "Value": "No"
        }, 
        {
          "Desc": "Yes",
          "Key": "MULTIPASTE_EDLAPPLYASCCDL_CDL",
          "Value": "CDL"
        }
      ]
    }, 
    {
      "Name": "MULTIPASTE_LAYERZEROBEHAVIOUR",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Values for MultiPasteSettings LayerZeroBehaviour",
      "Values": [ 
        {
          "Desc": "All Layers, Except Layer 0",
          "Key": "MULTIPASTE_LAYERZEROBEHAVIOUR_STACKONLY",
          "Value": "StackOnly"
        }, 
        {
          "Desc": "All Layers, Including Layer 0",
          "Key": "MULTIPASTE_LAYERZEROBEHAVIOUR_LAYERZEROANDSTACK",
          "Value": "LayerZeroAndStack"
        }, 
        {
          "Desc": "Layer 0 Only",
          "Key": "MULTIPASTE_LAYERZEROBEHAVIOUR_LAYERZEROONLY",
          "Value": "LayerZeroOnly"
        }, 
        {
          "Desc": "No Layers",
          "Key": "MULTIPASTE_LAYERZEROBEHAVIOUR_NOLAYERS",
          "Value": "NoLayers"
        }
      ]
    }, 
    {
      "Name": "MULTIPASTE_LAYERZEROCATEGORIES",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Values for MultiPasteSettings LayerZeroCategories",
      "Values": [ 
        {
          "Desc": "Append Categories, Except",
          "Key": "MULTIPASTE_LAYERZEROCATEGORIES_INCLUDE",
          "Value": "Include"
        }, 
        {
          "Desc": "Replace Categories, Add All Except",
          "Key": "MULTIPASTE_LAYERZEROCATEGORIES_OVERWRITE",
          "Value": "Overwrite"
        }, 
        {
          "Desc": "Do Not Copy Layer 0 Categories",
          "Key": "MULTIPASTE_LAYERZEROCATEGORIES_NO",
          "Value": "No"
        }
      ]
    }, 
    {
      "Name": "MULTIPASTE_MATCHBY",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Values for MultiPasteSettings MatchBy",
      "Values": [ 
        {
          "Desc": "Source Tape Name",
          "Key": "MULTIPASTE_MATCHBY_TAPENAME",
          "Value": "TapeName"
        }, 
        {
          "Desc": "Source Path+Filename",
          "Key": "MULTIPASTE_MATCHBY_FILENAME",
          "Value": "Filename"
        }, 
        {
          "Desc": "Source Clip Name",
          "Key": "MULTIPASTE_MATCHBY_CLIPNAME",
          "Value": "ClipName"
        }, 
        {
          "Desc": "Source Avid UID",
          "Key": "MULTIPASTE_MATCHBY_AVIDUID",
          "Value": "AvidUID"
        }, 
        {
          "Desc": "Source Camera",
          "Key": "MULTIPASTE_MATCHBY_CAMERA",
          "Value": "Camera"
        }, 
        {
          "Desc": "Source BLG Name",
          "Key": "MULTIPASTE_MATCHBY_BLGNAME",
          "Value": "BLGName"
        }, 
        {
          "Desc": "Source BLG ID",
          "Key": "MULTIPASTE_MATCHBY_BLGID",
          "Value": "BLGId"
        }, 
        {
          "Desc": "Source Scene",
          "Key": "MULTIPASTE_MATCHBY_SCENE",
          "Value": "Scene"
        }, 
        {
          "Desc": "Source Scene & Take",
          "Key": "MULTIPASTE_MATCHBY_SCENETAKE",
          "Value": "SceneTake"
        }, 
        {
          "Desc": "Source Camera Roll",
          "Key": "MULTIPASTE_MATCHBY_CAMERAROLL",
          "Value": "CameraRoll"
        }, 
        {
          "Desc": "Source Lab Roll",
          "Key": "MULTIPASTE_MATCHBY_LABROLL",
          "Value": "LabRoll"
        }, 
        {
          "Desc": "Source LUT",
          "Key": "MULTIPASTE_MATCHBY_LUT",
          "Value": "LUT"
        }, 
        {
          "Desc": "Source LUT2",
          "Key": "MULTIPASTE_MATCHBY_LUT2",
          "Value": "LUT2"
        }, 
        {
          "Desc": "Source ASC_CC_XML",
          "Key": "MULTIPASTE_MATCHBY_ASC_CC_XML",
          "Value": "ASC_CC_XML"
        }, 
        {
          "Desc": "Source Frame Number",
          "Key": "MULTIPASTE_MATCHBY_FRAMENUMBER",
          "Value": "FrameNumber"
        }, 
        {
          "Desc": "Source Timecode",
          "Key": "MULTIPASTE_MATCHBY_TIMECODE",
          "Value": "Timecode"
        }, 
        {
          "Desc": "Source Keycode",
          "Key": "MULTIPASTE_MATCHBY_KEYCODE",
          "Value": "Keycode"
        }, 
        {
          "Desc": "Record Frame Number",
          "Key": "MULTIPASTE_MATCHBY_RECORDFRAMENUMBER",
          "Value": "RecordFrameNumber"
        }, 
        {
          "Desc": "Record Timecode",
          "Key": "MULTIPASTE_MATCHBY_RECORDTIMECODE",
          "Value": "RecordTimecode"
        }, 
        {
          "Desc": "Ignore Time Ranges",
          "Key": "MULTIPASTE_MATCHBY_ALWAYSMATCH",
          "Value": "AlwaysMatch"
        }
      ]
    }, 
    {
      "Name": "MULTIPASTE_MATCHQUALITY",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Values for MultiPasteSettings MatchQuality",
      "Values": [ 
        {
          "Desc": "Exact",
          "Key": "MULTIPASTE_MATCHQUALITY_EXACTMATCH",
          "Value": "ExactMatch"
        }, 
        {
          "Desc": "Fuzzy",
          "Key": "MULTIPASTE_MATCHQUALITY_FUZZYMATCH",
          "Value": "FuzzyMatch"
        }
      ]
    }, 
    {
      "Name": "MULTIPASTE_PASTELOCATION",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Values for MultiPasteSettings PasteLocation",
      "Values": [ 
        {
          "Desc": "Above Remaining Destination Layers",
          "Key": "MULTIPASTE_PASTELOCATION_ABOVE",
          "Value": "Above"
        }, 
        {
          "Desc": "Below Remaining Destination Layers",
          "Key": "MULTIPASTE_PASTELOCATION_BELOW",
          "Value": "Below"
        }
      ]
    }, 
    {
      "Name": "MULTIPASTE_SOURCE",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Values for MultiPasteSettings Source",
      "Values": [ 
        {
          "Desc": "Current Copy Buffer",
          "Key": "MULTIPASTE_SOURCE_COPYBUFFER",
          "Value": "CopyBuffer"
        }, 
        {
          "Desc": "Multiple Scenes",
          "Key": "MULTIPASTE_SOURCE_MULTIPLESCENES",
          "Value": "MultipleScenes"
        }, 
        {
          "Desc": "BLG Files",
          "Key": "MULTIPASTE_SOURCE_BLG",
          "Value": "BLG"
        }, 
        {
          "Desc": "LUT Files",
          "Key": "MULTIPASTE_SOURCE_LUT",
          "Value": "LUT"
        }, 
        {
          "Desc": "CDL/CCC XML Files",
          "Key": "MULTIPASTE_SOURCE_CDL",
          "Value": "CDL"
        }, 
        {
          "Desc": "EDL/ALE files",
          "Key": "MULTIPASTE_SOURCE_EDL",
          "Value": "EDL"
        }
      ]
    }, 
    {
      "Name": "MULTIPASTE_SOURCESHOTS",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Values for MultiPasteSettings SourceShots",
      "Values": [ 
        {
          "Desc": "Copy All",
          "Key": "MULTIPASTE_SOURCESHOTS_COPYALL",
          "Value": "CopyAll"
        }, 
        {
          "Desc": "Copy All, Except Layers of Category",
          "Key": "MULTIPASTE_SOURCESHOTS_COPYALLEXCEPTCATS",
          "Value": "CopyAllExceptCats"
        }, 
        {
          "Desc": "Copy Only Layers of Category",
          "Key": "MULTIPASTE_SOURCESHOTS_COPYONLYCATS",
          "Value": "CopyOnlyCats"
        }
      ]
    }, 
    {
      "Name": "OPENFLAG",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Flags used to control opening a scene",
      "Values": [ 
        {
          "Desc": "Discard any unsaved changes when opening scene",
          "Key": "OPENFLAG_DISCARD",
          "Value": "discard"
        }, 
        {
          "Desc": "Recover any unsaved changes when opening scene",
          "Key": "OPENFLAG_RECOVER",
          "Value": "recover"
        }, 
        {
          "Desc": "Allow opening of old scenes",
          "Key": "OPENFLAG_OLD",
          "Value": "openold"
        }, 
        {
          "Desc": "Ignore data revision number when opening scene",
          "Key": "OPENFLAG_IGNORE_REVISION",
          "Value": "ignorerevision"
        }, 
        {
          "Desc": "Open scene read-only",
          "Key": "OPENFLAG_READ_ONLY",
          "Value": "readonly"
        }, 
        {
          "Desc": "Allow opening scenes that reference unknown OpenFX plugins",
          "Key": "OPENFLAG_ALLOW_UNKNOWN_OFX",
          "Value": "allow_unknown_openfx"
        }, 
        {
          "Desc": "Don't warn if scene uses container that is not known on this machine",
          "Key": "OPENFLAG_NO_CONTAINER_WARNING",
          "Value": "nocontainerwarning"
        }
      ]
    }, 
    {
      "Name": "OPERATOR_BARS_TYPE",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Define the type of Bars to render",
      "Values": [ 
        {
          "Desc": "SMPTE 75% white",
          "Key": "OPERATOR_BARS_TYPE_RP219HD_2a3a",
          "Value": "RP219HD_2a3a"
        }, 
        {
          "Desc": "SMPTE 100% white",
          "Key": "OPERATOR_BARS_TYPE_RP219HD_2b3a",
          "Value": "RP219HD_2b3a"
        }, 
        {
          "Desc": "SMPTE +I +Q",
          "Key": "OPERATOR_BARS_TYPE_RP219HD_2c3b",
          "Value": "RP219HD_2c3b"
        }, 
        {
          "Desc": "SMPTE -I +Q",
          "Key": "OPERATOR_BARS_TYPE_RP219HD_2d3b",
          "Value": "RP219HD_2d3b"
        }, 
        {
          "Desc": "Grey bars",
          "Key": "OPERATOR_BARS_TYPE_GREYS17",
          "Value": "GREYS17"
        }, 
        {
          "Desc": "Grey ramp",
          "Key": "OPERATOR_BARS_TYPE_RAMP",
          "Value": "RAMP"
        }, 
        {
          "Desc": "RGB and greys",
          "Key": "OPERATOR_BARS_TYPE_RGBGREY",
          "Value": "RGBGREY"
        }, 
        {
          "Desc": "BT.2111/ARIB B72 (HLG)",
          "Key": "OPERATOR_BARS_TYPE_B72",
          "Value": "B72"
        }, 
        {
          "Desc": "BT.2111 (PQ)",
          "Key": "OPERATOR_BARS_TYPE_ITU2111_PQ",
          "Value": "ITU2111_PQ"
        }, 
        {
          "Desc": "ARIB B66 (UHDTV 4K)",
          "Key": "OPERATOR_BARS_TYPE_B66_4K",
          "Value": "B66_4K"
        }, 
        {
          "Desc": "ARIB B66 (UHDTV 8K)",
          "Key": "OPERATOR_BARS_TYPE_B66_8K",
          "Value": "B66_8K"
        }
      ]
    }, 
    {
      "Name": "OPSTATUS",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Status of an operation in Queue or Processor",
      "Values": [ 
        {
          "Desc": "Operation is being created",
          "Key": "OPSTATUS_CREATING",
          "Value": "Creating"
        }, 
        {
          "Desc": "Operation is waiting in the queue",
          "Key": "OPSTATUS_QUEUED",
          "Value": "Queued"
        }, 
        {
          "Desc": "Operation is active",
          "Key": "OPSTATUS_ACTIVE",
          "Value": "Active"
        }, 
        {
          "Desc": "Operation crashed",
          "Key": "OPSTATUS_CRASHED",
          "Value": "Crashed"
        }, 
        {
          "Desc": "Operation has been manually stopped",
          "Key": "OPSTATUS_STOPPED",
          "Value": "Stopped"
        }, 
        {
          "Desc": "Operation was submitted to the queue by a newer version of the software and cannot be processed",
          "Key": "OPSTATUS_TOONEW",
          "Value": "Too New"
        }, 
        {
          "Desc": "Operation is complete",
          "Key": "OPSTATUS_DONE",
          "Value": "Done"
        }
      ]
    }, 
    {
      "Name": "OPTICALFLOW_QUALITY",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Optical Flow Quality",
      "Values": [ 
        {
          "Desc": "Best Quality",
          "Key": "OFLOWQUAL_BEST",
          "Value": "Best"
        }, 
        {
          "Desc": "High Quality",
          "Key": "OFLOWQUAL_HIGH",
          "Value": "High"
        }, 
        {
          "Desc": "Medium Quality",
          "Key": "OFLOWQUAL_MEDIUM",
          "Value": "Medium"
        }
      ]
    }, 
    {
      "Name": "OPTICALFLOW_SMOOTHING",
      "Type": "int",
      "Enum": 1,
      "Value": null,
      "Desc": "Optical Flow Smoothing",
      "Values": [ 
        {
          "Desc": "None",
          "Key": "OFLOWSMOOTH_NONE",
          "Value": 0
        }, 
        {
          "Desc": "Low",
          "Key": "OFLOWSMOOTH_LOW",
          "Value": 1
        }, 
        {
          "Desc": "Medium",
          "Key": "OFLOWSMOOTH_MEDIUM",
          "Value": 2
        }, 
        {
          "Desc": "High",
          "Key": "OFLOWSMOOTH_HIGH",
          "Value": 3
        }, 
        {
          "Desc": "Maximum",
          "Key": "OFLOWSMOOTH_MAX",
          "Value": 4
        }
      ]
    }, 
    {
      "Name": "PROXY_RESOLUTION",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Proxy Resolution of Render Format",
      "Values": [ 
        {
          "Desc": "High (full) resolution",
          "Key": "RES_HIGH",
          "Value": "GMPR_HIGH"
        }, 
        {
          "Desc": "Medium proxy resolution",
          "Key": "RES_MEDIUM",
          "Value": "GMPR_MEDIUM"
        }, 
        {
          "Desc": "Low proxy resolution",
          "Key": "RES_LOW",
          "Value": "GMPR_LOW"
        }
      ]
    }, 
    {
      "Name": "RENDER_CLIPNAME_SOURCE",
      "Type": "int",
      "Enum": 1,
      "Value": null,
      "Desc": "Which clip name to embed into rendered output",
      "Values": [ 
        {
          "Desc": "Source File Clip Name",
          "Key": "RENDER_CLIPNAME_FILE",
          "Value": 0
        }, 
        {
          "Desc": "Shot Clip Name",
          "Key": "RENDER_CLIPNAME_SHOT",
          "Value": 1
        }, 
        {
          "Desc": "Clip Name from Strip Name",
          "Key": "RENDER_CLIPNAME_STRIP",
          "Value": 2
        }
      ]
    }, 
    {
      "Name": "RENDER_COLOURSPACE",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Special values to use for RenderColourSpace in RenderDeliverable",
      "Values": [ 
        {
          "Desc": "Use Input Colour Space of Shot",
          "Key": "RENDER_COLOURSPACE_USEINPUT",
          "Value": "Input"
        }, 
        {
          "Desc": "Use Stack Output Colour Space.\nThis will resolve to the Scene Grade Result Colour Space if specified, otherwise this will resolve to the Scene Working Colour Space.",
          "Key": "RENDER_COLOURSPACE_USESTACKOUTPUT",
          "Value": "None"
        }
      ]
    }, 
    {
      "Name": "RENDER_EMPTY_BEHAVIOUR",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Action to take when encountering frames in timeline with no strips/shots",
      "Values": [ 
        {
          "Desc": "Fail Render",
          "Key": "RENDER_EMPTY_FAIL",
          "Value": "GMREB_FAIL"
        }, 
        {
          "Desc": "Render Black Frame",
          "Key": "RENDER_EMPTY_BLACK",
          "Value": "GMREB_BLACK"
        }, 
        {
          "Desc": "Render Chequerboard Frame",
          "Key": "RENDER_EMPTY_CHEQUER",
          "Value": "GMREB_CHEQUER"
        }
      ]
    }, 
    {
      "Name": "RENDER_ERROR_BEHAVIOUR",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Action to take when encountering frames in timeline with no strips/shots",
      "Values": [ 
        {
          "Desc": "Fail Render",
          "Key": "RENDER_ERROR_FAIL",
          "Value": "ABORT"
        }, 
        {
          "Desc": "Skip Frame And Continue",
          "Key": "RENDER_ERROR_SKIP",
          "Value": "SKIP"
        }, 
        {
          "Desc": "Render Black Frame",
          "Key": "RENDER_ERROR_BLACK",
          "Value": "BLACK"
        }, 
        {
          "Desc": "Render Chequerboard Frame And Continue",
          "Key": "RENDER_ERROR_CHEQUER",
          "Value": "CHEQUER"
        }
      ]
    }, 
    {
      "Name": "RENDER_FORMAT",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Special values to use for RenderFormat in RenderDeliverable",
      "Values": [ 
        {
          "Desc": "Use Shot Input Format",
          "Key": "RENDER_FORMAT_USEINPUT",
          "Value": "0"
        }
      ]
    }, 
    {
      "Name": "RENDER_FRAMENUM",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Specify how frame number for sequence should be calculated",
      "Values": [ 
        {
          "Desc": "Scene Frame Number",
          "Key": "RENDER_FRAMENUM_SCENE_FRAME",
          "Value": "F"
        }, 
        {
          "Desc": "Shot  Frame Number",
          "Key": "RENDER_FRAMENUM_SHOT_FRAME",
          "Value": "G"
        }, 
        {
          "Desc": "Record Timecode as Frame Number",
          "Key": "RENDER_FRAMENUM_SCENE_TIMECODE",
          "Value": "T"
        }, 
        {
          "Desc": "Shot Timecode as Frame Number",
          "Key": "RENDER_FRAMENUM_SHOT_TIMECODE",
          "Value": "H"
        }
      ]
    }, 
    {
      "Name": "RENDER_INCOMPLETE_BEHAVIOUR",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Action to take when encountering shots with missing strips",
      "Values": [ 
        {
          "Desc": "Fail Render",
          "Key": "RENDER_INCOMPLETE_FAIL",
          "Value": "GMREB_FAIL"
        }, 
        {
          "Desc": "Render As Baselight (Chequerboard Missing)",
          "Key": "RENDER_INCOMPLETE_CONTINUE",
          "Value": "GMREB_CONTINUE"
        }, 
        {
          "Desc": "Render Black Frame",
          "Key": "RENDER_INCOMPLETE_BLACK",
          "Value": "GMREB_BLACK"
        }, 
        {
          "Desc": "Render Chequerboard Frame",
          "Key": "RENDER_INCOMPLETE_CHEQUER",
          "Value": "GMREB_CHEQUER"
        }
      ]
    }, 
    {
      "Name": "RENDER_LAYER",
      "Type": "int",
      "Enum": 1,
      "Value": null,
      "Desc": "Layers to include when rendering. This can be a layer number or one of the following constants.",
      "Values": [ 
        {
          "Desc": "Include all grade layers in rendered output",
          "Key": "RENDER_LAYER_ALL",
          "Value": -1
        }, 
        {
          "Desc": "Do not include any grade layers or operators in layer 0",
          "Key": "RENDER_LAYER_LAYERS_INPUTONLY",
          "Value": -2
        }, 
        {
          "Desc": "Do not include any grade layers",
          "Key": "RENDER_LAYER_LAYER0",
          "Value": 0
        }
      ]
    }, 
    {
      "Name": "RENDER_MASK",
      "Type": "int",
      "Enum": 1,
      "Value": null,
      "Desc": "Select whether to crop to the mask, or set the black value for the masked area",
      "Values": [ 
        {
          "Desc": "Crop image to mask",
          "Key": "RENDER_MASK_CROP",
          "Value": -1
        }, 
        {
          "Desc": "Set mask area to absolue black (0)",
          "Key": "RENDER_MASK_BLACK",
          "Value": 0
        }, 
        {
          "Desc": "Set mask area to video black (16/255)",
          "Key": "RENDER_MASK_VIDEO",
          "Value": 64
        }, 
        {
          "Desc": "Set mask area to film black (95/1023)",
          "Key": "RENDER_MASK_FILM",
          "Value": 95
        }
      ]
    }, 
    {
      "Name": "RENDER_NCLC_TAG",
      "Type": "int",
      "Enum": 1,
      "Value": null,
      "Desc": "Which NCLC tag to use in QuickTime Movie files for colourimetry",
      "Values": [ 
        {
          "Desc": "Use legacy NCLC tag",
          "Key": "RENDER_NCLC_LEGACY",
          "Value": 0
        }, 
        {
          "Desc": "Use NCLC tag based on RenderColourSpace",
          "Key": "RENDER_NCLC_AUTOMATIC",
          "Value": 1
        }
      ]
    }, 
    {
      "Name": "RENDER_TAPENAME_SOURCE",
      "Type": "int",
      "Enum": 1,
      "Value": null,
      "Desc": "Which tape name to embed into rendered output",
      "Values": [ 
        {
          "Desc": "Source File Tape Name",
          "Key": "RENDER_TAPENAME_FILE",
          "Value": 0
        }, 
        {
          "Desc": "Shot Tape Name",
          "Key": "RENDER_TAPENAME_SHOT",
          "Value": 1
        }, 
        {
          "Desc": "Shot Clip Name",
          "Key": "RENDER_TAPENAME_CLIP",
          "Value": 3
        }, 
        {
          "Desc": "Tape Name from Strip Name",
          "Key": "RENDER_TAPENAME_STRIP",
          "Value": 2
        }
      ]
    }, 
    {
      "Name": "RENDER_TIMECODE_SOURCE",
      "Type": "int",
      "Enum": 1,
      "Value": null,
      "Desc": "Which timecode to embed into rendered output",
      "Values": [ 
        {
          "Desc": "File Timecode 1",
          "Key": "RENDER_TIMECODE_FILETC1",
          "Value": 0
        }, 
        {
          "Desc": "File Timecode 2",
          "Key": "RENDER_TIMECODE_FILETC2",
          "Value": 3
        }, 
        {
          "Desc": "Shot Timecode",
          "Key": "RENDER_TIMECODE_SHOTTC",
          "Value": 2
        }, 
        {
          "Desc": "Record (Timeline) Timecode",
          "Key": "RENDER_TIMECODE_RECTC",
          "Value": 1
        }
      ]
    }, 
    {
      "Name": "ROP_TEXT_ALIGN",
      "Type": "int",
      "Enum": 1,
      "Value": null,
      "Desc": "Text alignment",
      "Values": [ 
        {
          "Desc": "Left",
          "Key": "ROP_TEXT_ALIGN_LEFT",
          "Value": 0
        }, 
        {
          "Desc": "Center",
          "Key": "ROP_TEXT_ALIGN_CENTER",
          "Value": 1
        }, 
        {
          "Desc": "Right",
          "Key": "ROP_TEXT_ALIGN_RIGHT",
          "Value": 2
        }
      ]
    }, 
    {
      "Name": "SEQRESAMPLE_MODE",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Sequence Resample Mode to use when resampling a sequence to a different video frame rate",
      "Values": [ 
        {
          "Desc": "Snap to Frame",
          "Key": "SEQRESAMPLE_SNAP_TO_FRAME",
          "Value": "SnapToFrame"
        }, 
        {
          "Desc": "Mix Nearest Frames",
          "Key": "SEQRESAMPLE_ROLLING_MAX",
          "Value": "RollingMix"
        }, 
        {
          "Desc": "Optical Flow",
          "Key": "SEQRESAMPLE_OPTICAL_FLOW",
          "Value": "OpticalFlow"
        }
      ]
    }, 
    {
      "Name": "STEREO_EYE",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Stereo eye",
      "Values": [ 
        {
          "Desc": "Mono (no stereo)",
          "Key": "STEREOEYE_MONO",
          "Value": "GMSE_MONO"
        }, 
        {
          "Desc": "Left eye",
          "Key": "STEREOEYE_LEFT",
          "Value": "GMSE_LEFT"
        }, 
        {
          "Desc": "Right eye",
          "Key": "STEREOEYE_RIGHT",
          "Value": "GMSE_RIGHT"
        }
      ]
    }, 
    {
      "Name": "STILLEXPORT_BURNIN",
      "Type": "NULL",
      "Enum": 1,
      "Value": null,
      "Desc": "Values for StillExportSettings Burnin",
      "Values": [ 
        
      ]
    }, 
    {
      "Name": "STILLEXPORT_DECODEQUALITY",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Values for StillExportSettings DecodeQuality",
      "Values": [ 
        {
          "Desc": "Max Quality\tDecode at maximum resolution",
          "Key": "STILLEXPORT_DECODEQUALITY_GMDQ_OPTIMISED_UNLESS_HIGH",
          "Value": "GMDQ_OPTIMISED_UNLESS_HIGH"
        }, 
        {
          "Desc": "Optimised\tDecode at half resolution where possible, for speed",
          "Key": "STILLEXPORT_DECODEQUALITY_GMDQ_OPTIMISED",
          "Value": "GMDQ_OPTIMISED"
        }, 
        {
          "Desc": "Draft\tDecode at draft quality, for maximum speed",
          "Key": "STILLEXPORT_DECODEQUALITY_GMDQ_DRAFT",
          "Value": "GMDQ_DRAFT"
        }
      ]
    }, 
    {
      "Name": "STILLEXPORT_FILETYPE",
      "Type": "NULL",
      "Enum": 1,
      "Value": null,
      "Desc": "Values for StillExportSettings FileType",
      "Values": [ 
        
      ]
    }, 
    {
      "Name": "STILLEXPORT_FORMAT",
      "Type": "NULL",
      "Enum": 1,
      "Value": null,
      "Desc": "Values for StillExportSettings Format",
      "Values": [ 
        
      ]
    }, 
    {
      "Name": "STILLEXPORT_MASK",
      "Type": "NULL",
      "Enum": 1,
      "Value": null,
      "Desc": "Values for StillExportSettings Mask",
      "Values": [ 
        
      ]
    }, 
    {
      "Name": "STILLEXPORT_MASKMODE",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Values for StillExportSettings MaskMode",
      "Values": [ 
        {
          "Desc": "Crop Image To Mask",
          "Key": "STILLEXPORT_MASKMODE_CROP",
          "Value": "Crop"
        }, 
        {
          "Desc": "Hard Black (0) Mask",
          "Key": "STILLEXPORT_MASKMODE_HARDBLACK",
          "Value": "HardBlack"
        }, 
        {
          "Desc": "Video Black (16/255) Mask",
          "Key": "STILLEXPORT_MASKMODE_VIDEOBLACK",
          "Value": "VideoBlack"
        }, 
        {
          "Desc": "Film Black (95/1023) Mask",
          "Key": "STILLEXPORT_MASKMODE_FILMBLACK",
          "Value": "FilmBlack"
        }
      ]
    }, 
    {
      "Name": "STILLEXPORT_RESOLUTION",
      "Type": "NULL",
      "Enum": 1,
      "Value": null,
      "Desc": "Values for StillExportSettings Resolution",
      "Values": [ 
        
      ]
    }, 
    {
      "Name": "STILLEXPORT_TRUELIGHT",
      "Type": "NULL",
      "Enum": 1,
      "Value": null,
      "Desc": "Values for StillExportSettings Truelight",
      "Values": [ 
        
      ]
    }, 
    {
      "Name": "SVGFITMODE",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Controls how an SVG is transformed/fitted into a shape strip's 'target area' (the working format area or an optional mask area transformed to the working format).",
      "Values": [ 
        {
          "Desc": "The SVG is translated to the corner of the target area. No Scaling is applied.",
          "Key": "SVGFITMODE_NONE",
          "Value": "None"
        }, 
        {
          "Desc": "The SVG image is translated to the centre of the target area and pillarboxed or letterboxed to fit the target area's height or width respectively.",
          "Key": "SVGFITMODE_BEST",
          "Value": "Best"
        }, 
        {
          "Desc": "The SVG is stretched horizontally and vertically to fit the target area.",
          "Key": "SVGFITMODE_STRETCH",
          "Value": "Stretch"
        }
      ]
    }, 
    {
      "Name": "VIDEOLUT",
      "Type": "string",
      "Enum": 1,
      "Value": null,
      "Desc": "Video Scaling LUT",
      "Values": [ 
        {
          "Desc": "No video scaling LUT applied",
          "Key": "VIDEOLUT_NONE",
          "Value": "none"
        }, 
        {
          "Desc": "Full to Legal Scale",
          "Key": "VIDEOLUT_SCALE",
          "Value": "scale"
        }, 
        {
          "Desc": "Full to Legal Scale (Unclipped)",
          "Key": "VIDEOLUT_SCALE_NOCLIP",
          "Value": "scalenoclip"
        }, 
        {
          "Desc": "Legal to Full Scale",
          "Key": "VIDEOLUT_UNSCALE",
          "Value": "unscale"
        }, 
        {
          "Desc": "Soft Clip to Full Range",
          "Key": "VIDEOLUT_FULLRANGE_SOFTCLIP",
          "Value": "fullrangesoftclip"
        }, 
        {
          "Desc": "Clip to Legal",
          "Key": "VIDEOLUT_CLIP",
          "Value": "clip"
        }, 
        {
          "Desc": "Soft Clip to Legal",
          "Key": "VIDEOLUT_SOFTCLIP",
          "Value": "softclip"
        }
      ]
    }
  ],
  "ValueTypes": [ 
    {
      "Name": "APIUserInfo",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Login",
          "Type": "string",
          "Desc": "Login name",
          "Values": null
        }, 
        {
          "Name": "Name",
          "Type": "string",
          "Desc": "Name",
          "Values": null
        }, 
        {
          "Name": "Permissions",
          "Type": "set",
          "Desc": "Set of permissions assigned to this user",
          "Values": null
        }, 
        {
          "Name": "Enabled",
          "Type": "int",
          "Desc": "Is this user currently enabled",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "BLGExportSettings",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Source",
          "Type": "int",
          "Desc": "Export BLGs for",
          "Values": null
        }, 
        {
          "Name": "Filter",
          "Type": "string",
          "Desc": "Tab/Filter",
          "Values": null
        }, 
        {
          "Name": "Category",
          "Type": "set",
          "Desc": "Category",
          "Values": null
        }, 
        {
          "Name": "CategoryMatch",
          "Type": "int",
          "Desc": "Shots Must Match",
          "Values": null
        }, 
        {
          "Name": "Frames",
          "Type": "int",
          "Desc": "Frames",
          "Values": null
        }, 
        {
          "Name": "MarkCategory",
          "Type": "set",
          "Desc": "Mark Category",
          "Values": null
        }, 
        {
          "Name": "Stereo",
          "Type": "int",
          "Desc": "Stereo",
          "Values": null
        }, 
        {
          "Name": "Directory",
          "Type": "string",
          "Desc": "Export Directory",
          "Values": null
        }, 
        {
          "Name": "Overwrite",
          "Type": "int",
          "Desc": "Existing BLGs",
          "Values": null
        }, 
        {
          "Name": "Path",
          "Type": "string",
          "Desc": "",
          "Values": null
        }, 
        {
          "Name": "Template",
          "Type": "string",
          "Desc": "Value for Template",
          "Values": null
        }, 
        {
          "Name": "Scale",
          "Type": "int",
          "Desc": "Value for Scale",
          "Values": null
        }, 
        {
          "Name": "AllowMultiInput",
          "Type": "int",
          "Desc": "Allow Multi-Input BLGs, flag indicating true or false",
          "Values": null
        }, 
        {
          "Name": "GenerateNukeScripts",
          "Type": "int",
          "Desc": "Generate Nuke Scripts, flag indicating true or false",
          "Values": null
        }, 
        {
          "Name": "GenerateWriteNode",
          "Type": "int",
          "Desc": "Value for GenerateWriteNode, flag indicating true or false",
          "Values": null
        }, 
        {
          "Name": "Keyframes",
          "Type": "int",
          "Desc": "Include Keyframes, flag indicating true or false",
          "Values": null
        }, 
        {
          "Name": "LockGrade",
          "Type": "int",
          "Desc": "Lock Grade",
          "Values": null
        }, 
        {
          "Name": "ViewingColourSpace",
          "Type": "string",
          "Desc": "Viewing Colour Space",
          "Values": null
        }, 
        {
          "Name": "ViewingFormat",
          "Type": "string",
          "Desc": "Viewing Format",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "CDLExportSettings",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Source",
          "Type": "int",
          "Desc": "Export CDLs for",
          "Values": null
        }, 
        {
          "Name": "Filter",
          "Type": "string",
          "Desc": "Tab/Filter",
          "Values": null
        }, 
        {
          "Name": "Category",
          "Type": "set",
          "Desc": "Category",
          "Values": null
        }, 
        {
          "Name": "CategoryMatch",
          "Type": "int",
          "Desc": "Shots Must Match",
          "Values": null
        }, 
        {
          "Name": "Frames",
          "Type": "int",
          "Desc": "Frames",
          "Values": null
        }, 
        {
          "Name": "MarkCategory",
          "Type": "set",
          "Desc": "Mark Category",
          "Values": null
        }, 
        {
          "Name": "Stereo",
          "Type": "int",
          "Desc": "Stereo",
          "Values": null
        }, 
        {
          "Name": "Directory",
          "Type": "string",
          "Desc": "Export Directory",
          "Values": null
        }, 
        {
          "Name": "Overwrite",
          "Type": "int",
          "Desc": "Existing CDLs",
          "Values": null
        }, 
        {
          "Name": "Format",
          "Type": "int",
          "Desc": "Format",
          "Values": null
        }, 
        {
          "Name": "PathExample",
          "Type": "string",
          "Desc": "",
          "Values": null
        }, 
        {
          "Name": "Template",
          "Type": "string",
          "Desc": "Filename",
          "Values": null
        }, 
        {
          "Name": "LookNameExample",
          "Type": "string",
          "Desc": "",
          "Values": null
        }, 
        {
          "Name": "LookName",
          "Type": "string",
          "Desc": "Look Name",
          "Values": null
        }, 
        {
          "Name": "CDLLayer",
          "Type": "int",
          "Desc": "CDL Layer",
          "Values": null
        }, 
        {
          "Name": "CDLLayerCustom",
          "Type": "int",
          "Desc": "CDL Layer n",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "CategoryInfo",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Key",
          "Type": "string",
          "Desc": "Key used to identify this category",
          "Values": null
        }, 
        {
          "Name": "Name",
          "Type": "string",
          "Desc": "User-visible name for this category. For user-added categories, 'Name' will always match 'Key', but some built-in categories will have different keys and names (e.g \"DefaultStripCat\" and \"Default Strip Category\").",
          "Values": null
        }, 
        {
          "Name": "ReadOnly",
          "Type": "string",
          "Desc": "Is this category built-in and immutable",
          "Values": null
        }, 
        {
          "Name": "Colour",
          "Type": "array",
          "Desc": "Default colour associated with this category",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "ClientViewClientSettings",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "StreamIndex",
          "Type": "int",
          "Desc": "Stream index, or -1 if streaming disabled",
          "Values": null
        }, 
        {
          "Name": "StreamConfigsAge",
          "Type": "int",
          "Desc": "'Age' value incremented when a stream's configuration value changes. ",
          "Values": null
        }, 
        {
          "Name": "NotesEnabled",
          "Type": "int",
          "Desc": "Flag set if the Client View can add/edit notes and flags",
          "Values": null
        }, 
        {
          "Name": "LaserEnabled",
          "Type": "int",
          "Desc": "Flag set if the Client View has a laser pointer (if streaming enabled)",
          "Values": null
        }, 
        {
          "Name": "Debug",
          "Type": "int",
          "Desc": "",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "ClientViewStreamSettings",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Resolution",
          "Type": "string",
          "Desc": "Stream resolution string eg. '1920x1080'",
          "Values": null
        }, 
        {
          "Name": "Bitrate",
          "Type": "int",
          "Desc": "Integer bitrate in Mbit/s",
          "Values": null
        }, 
        {
          "Name": "ColourSpace",
          "Type": "string",
          "Desc": "Either 'P3', 'sRGB' or 'HDR'",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "ColourSpaceInfo",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Name",
          "Type": "string",
          "Desc": "Colour Space Name",
          "Values": null
        }, 
        {
          "Name": "DisplayName",
          "Type": "string",
          "Desc": "User-visible Colour Space Name",
          "Values": null
        }, 
        {
          "Name": "Type",
          "Type": "string",
          "Desc": "Type of Colour Space (\"scene\",\"display\",\"any\")",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "ConnectionInfo",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "ConnectionID",
          "Type": "int",
          "Desc": "Connection ID. Note: This can be obtained for a specific connection via a FLAPI Connection's 'get_connection_id()' method",
          "Values": null
        }, 
        {
          "Name": "UserName",
          "Type": "string",
          "Desc": "Connected user/client name",
          "Values": null
        }, 
        {
          "Name": "UsageType",
          "Type": "string",
          "Desc": "Usage type declared by a connection ('Unknown' if none explicitly set)",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "CubeExportSettings",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Source",
          "Type": "int",
          "Desc": "Export LUTs for",
          "Values": null
        }, 
        {
          "Name": "Filter",
          "Type": "string",
          "Desc": "Tab/Filter",
          "Values": null
        }, 
        {
          "Name": "Category",
          "Type": "set",
          "Desc": "Category",
          "Values": null
        }, 
        {
          "Name": "CategoryMatch",
          "Type": "int",
          "Desc": "Shots Must Match",
          "Values": null
        }, 
        {
          "Name": "Frames",
          "Type": "int",
          "Desc": "Frames",
          "Values": null
        }, 
        {
          "Name": "MarkCategory",
          "Type": "set",
          "Desc": "Mark Category",
          "Values": null
        }, 
        {
          "Name": "Stereo",
          "Type": "int",
          "Desc": "Stereo",
          "Values": null
        }, 
        {
          "Name": "Directory",
          "Type": "string",
          "Desc": "Export Directory",
          "Values": null
        }, 
        {
          "Name": "Overwrite",
          "Type": "int",
          "Desc": "Existing LUTs",
          "Values": null
        }, 
        {
          "Name": "NumLUTs",
          "Type": "int",
          "Desc": "Number of LUTs",
          "Values": null
        }, 
        {
          "Name": "LUT1Options",
          "Type": "int",
          "Desc": "LUT 1 includes",
          "Values": null
        }, 
        {
          "Name": "LUT1Path",
          "Type": "string",
          "Desc": "",
          "Values": null
        }, 
        {
          "Name": "LUT1Name",
          "Type": "string",
          "Desc": "LUT 1 Name",
          "Values": null
        }, 
        {
          "Name": "LUT2Options",
          "Type": "int",
          "Desc": "LUT 2 includes",
          "Values": null
        }, 
        {
          "Name": "LUT2Path",
          "Type": "string",
          "Desc": "",
          "Values": null
        }, 
        {
          "Name": "LUT2Name",
          "Type": "string",
          "Desc": "LUT 2 Name",
          "Values": null
        }, 
        {
          "Name": "LUT3Options",
          "Type": "int",
          "Desc": "LUT 3 includes",
          "Values": null
        }, 
        {
          "Name": "LUT3Path",
          "Type": "string",
          "Desc": "",
          "Values": null
        }, 
        {
          "Name": "LUT3Name",
          "Type": "string",
          "Desc": "LUT 3 Name",
          "Values": null
        }, 
        {
          "Name": "InputColourSpace",
          "Type": "string",
          "Desc": "Input Colour Space",
          "Values": null
        }, 
        {
          "Name": "InputDRT",
          "Type": "string",
          "Desc": "Input Display Rendering Transform",
          "Values": null
        }, 
        {
          "Name": "LUTFormat",
          "Type": "int",
          "Desc": "LUT Format",
          "Values": null
        }, 
        {
          "Name": "ExtendedRanges",
          "Type": "int",
          "Desc": "Extended Input Range",
          "Values": null
        }, 
        {
          "Name": "InputMin",
          "Type": "float",
          "Desc": "Input Min",
          "Values": null
        }, 
        {
          "Name": "InputMaxLog",
          "Type": "float",
          "Desc": "Log Input Max",
          "Values": null
        }, 
        {
          "Name": "InputMaxLin",
          "Type": "float",
          "Desc": "Linear Input Max",
          "Values": null
        }, 
        {
          "Name": "InputLogOffset",
          "Type": "float",
          "Desc": "Log Offset",
          "Values": null
        }, 
        {
          "Name": "OutputColourSpace",
          "Type": "string",
          "Desc": "Output Colour Space",
          "Values": null
        }, 
        {
          "Name": "CubeResolution",
          "Type": "int",
          "Desc": "3D Cube Resolution",
          "Values": null
        }, 
        {
          "Name": "LUTResolution",
          "Type": "int",
          "Desc": "1D LUT Resolution",
          "Values": null
        }, 
        {
          "Name": "GradeReplace",
          "Type": "int",
          "Desc": "Replace Grades with LUTs, flag indicating true or false",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "CustomerInfo",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Name",
          "Type": "string",
          "Desc": "Customer name",
          "Values": null
        }, 
        {
          "Name": "LogoURI",
          "Type": "string",
          "Desc": "URI of customer logo",
          "Values": null
        }, 
        {
          "Name": "WebsiteURL",
          "Type": "string",
          "Desc": "URL to customer website",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "DRTInfo",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Name",
          "Type": "string",
          "Desc": "Display Render Transform Name",
          "Values": null
        }, 
        {
          "Name": "InputSpace",
          "Type": "string",
          "Desc": "Name of required Input Colour Space",
          "Values": null
        }, 
        {
          "Name": "OutputSpace",
          "Type": "string",
          "Desc": "name of result Output Colour Space",
          "Values": null
        }, 
        {
          "Name": "ViewingConditions",
          "Type": "array",
          "Desc": "Array of Viewing Condition names for the Display Rendering Transform",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "DecodeParameterChoice",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Value",
          "Type": "any",
          "Desc": "Value for this decode parameter value choice. Can be an Integer, Float or String",
          "Values": null
        }, 
        {
          "Name": "Label",
          "Type": "string",
          "Desc": "User-friendly label for this value",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "DecodeParameterDefinition",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Parameter",
          "Type": "string",
          "Desc": "Key to use in get_decode_parameters and set_decode_parameters",
          "Values": null
        }, 
        {
          "Name": "Type",
          "Type": "string",
          "Desc": "Data type for this parameter",
          "Values": null
        }, 
        {
          "Name": "Default",
          "Type": "any",
          "Desc": "Default value for this parameter",
          "Values": null
        }, 
        {
          "Name": "Label",
          "Type": "string",
          "Desc": "User-friendly label for this parameter",
          "Values": null
        }, 
        {
          "Name": "Min",
          "Type": "any",
          "Desc": "Minimum value for Integer or Float parameters",
          "Values": null
        }, 
        {
          "Name": "Max",
          "Type": "any",
          "Desc": "Maximum value for Integer or Float parameters",
          "Values": null
        }, 
        {
          "Name": "Choices",
          "Type": "array",
          "Desc": "Array of possible values for Choice parameters",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "EnumInfo",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Value",
          "Type": "string",
          "Desc": "Internal Value of Enum",
          "Values": null
        }, 
        {
          "Name": "Desc",
          "Type": "string",
          "Desc": "User friendly description of value",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "ExportOpInfo",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "ID",
          "Type": "int",
          "Desc": "Queue operation ID",
          "Values": null
        }, 
        {
          "Name": "Log",
          "Type": "array",
          "Desc": "",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "ExportProgress",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Status",
          "Type": "string",
          "Desc": null,
          "Values": null
        }, 
        {
          "Name": "Summary",
          "Type": "string",
          "Desc": "String summarising the export information",
          "Values": null
        }, 
        {
          "Name": "ShotID",
          "Type": "int",
          "Desc": "Shot ID that this progress information relates to",
          "Values": null
        }, 
        {
          "Name": "Frame",
          "Type": "int",
          "Desc": "Frame number within timeline",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "FormatBurninItem",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Type",
          "Type": "string",
          "Desc": "Item type",
          "Values": null
        }, 
        {
          "Name": "X",
          "Type": "float",
          "Desc": "X position in pixels",
          "Values": null
        }, 
        {
          "Name": "Y",
          "Type": "float",
          "Desc": "Y position in pixels",
          "Values": null
        }, 
        {
          "Name": "XAlign",
          "Type": "int",
          "Desc": "Horizontal alignemnt of text item",
          "Values": null
        }, 
        {
          "Name": "YAlign",
          "Type": "int",
          "Desc": "Vertical alignment of text item",
          "Values": null
        }, 
        {
          "Name": "Box",
          "Type": "string",
          "Desc": "Box drawn around text item",
          "Values": null
        }, 
        {
          "Name": "Height",
          "Type": "float",
          "Desc": "Height of text item in pixels",
          "Values": null
        }, 
        {
          "Name": "Text",
          "Type": "string",
          "Desc": "Content of text item",
          "Values": null
        }, 
        {
          "Name": "XScale",
          "Type": "float",
          "Desc": "X Scale factor of image item",
          "Values": null
        }, 
        {
          "Name": "YScale",
          "Type": "float",
          "Desc": "Y Scale factor of image item",
          "Values": null
        }, 
        {
          "Name": "ResX",
          "Type": "int",
          "Desc": "Width of image item in pixels",
          "Values": null
        }, 
        {
          "Name": "ResY",
          "Type": "int",
          "Desc": "Height of image item in pixels",
          "Values": null
        }, 
        {
          "Name": "Opacity",
          "Type": "float",
          "Desc": "Opacity of image item",
          "Values": null
        }, 
        {
          "Name": "File",
          "Type": "string",
          "Desc": "Path to image item",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "FormatInfo",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Width",
          "Type": "int",
          "Desc": "Width of format in pixels",
          "Values": null
        }, 
        {
          "Name": "Height",
          "Type": "int",
          "Desc": "Height of format in pixels",
          "Values": null
        }, 
        {
          "Name": "PixelAspectRatio",
          "Type": "float",
          "Desc": "Aspect ratio of width-to-height for each pixel",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "FormatMapping",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Sx",
          "Type": "float",
          "Desc": "X scaling factor",
          "Values": null
        }, 
        {
          "Name": "Sy",
          "Type": "float",
          "Desc": "Y scaling factor",
          "Values": null
        }, 
        {
          "Name": "Tx",
          "Type": "float",
          "Desc": "X translation",
          "Values": null
        }, 
        {
          "Name": "Ty",
          "Type": "float",
          "Desc": "Y translation",
          "Values": null
        }, 
        {
          "Name": "Inside",
          "Type": "int",
          "Desc": "Flag indicating whether mapping is inside or outside of destination format",
          "Values": null
        }, 
        {
          "Name": "SrcMask",
          "Type": "string",
          "Desc": "Name of source mask",
          "Values": null
        }, 
        {
          "Name": "DstMask",
          "Type": "string",
          "Desc": "Name of destination mask",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "FormatMask",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Name",
          "Type": "string",
          "Desc": "Name of mask",
          "Values": null
        }, 
        {
          "Name": "XMin",
          "Type": "int",
          "Desc": "Minimum X coordinate of mask within Format coordinate space",
          "Values": null
        }, 
        {
          "Name": "XMax",
          "Type": "int",
          "Desc": "Maximum X coordinate of mask within Format coordinate space",
          "Values": null
        }, 
        {
          "Name": "YMin",
          "Type": "int",
          "Desc": "Minimum Y coordinate of mask within Format coordinate space",
          "Values": null
        }, 
        {
          "Name": "YMax",
          "Type": "int",
          "Desc": "Maximum Y coordinate of mask within Format coordinate space",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "FrameRange",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Start",
          "Type": "int",
          "Desc": "Start Frame",
          "Values": null
        }, 
        {
          "Name": "End",
          "Type": "int",
          "Desc": "End Frame (inclusive",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "KeyTextItem",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Key",
          "Type": "any",
          "Desc": "",
          "Values": null
        }, 
        {
          "Name": "Text",
          "Type": "string",
          "Desc": "User-readable string describing this key",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "LicenceItem",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Product",
          "Type": "string",
          "Desc": "Product Name",
          "Values": null
        }, 
        {
          "Name": "Version",
          "Type": "string",
          "Desc": "Product Version Number",
          "Values": null
        }, 
        {
          "Name": "Options",
          "Type": "array",
          "Desc": "Array of licence options for product",
          "Values": null
        }, 
        {
          "Name": "Permanent",
          "Type": "int",
          "Desc": "Flag indicating whether licence item is permanent",
          "Values": null
        }, 
        {
          "Name": "Start",
          "Type": "string",
          "Desc": "Start date",
          "Values": null
        }, 
        {
          "Name": "Duration",
          "Type": "int",
          "Desc": "Number of days license is valid for from start date",
          "Values": null
        }, 
        {
          "Name": "DaysLeft",
          "Type": "int",
          "Desc": "Number of days until licence option expires",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "LookInfo",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Name",
          "Type": "string",
          "Desc": "Name of Look",
          "Values": null
        }, 
        {
          "Name": "Group",
          "Type": "string",
          "Desc": "Name of the group containing the look",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "MetadataItem",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Key",
          "Type": "string",
          "Desc": "Key used to retrieve metadata value",
          "Values": null
        }, 
        {
          "Name": "Name",
          "Type": "string",
          "Desc": "User-visible name for metadata item",
          "Values": null
        }, 
        {
          "Name": "Type",
          "Type": "string",
          "Desc": "Data Type of metadata item",
          "Values": null
        }, 
        {
          "Name": "NumElements",
          "Type": "int",
          "Desc": "Number of data values for this metadata field. If NumElements greater than 1, the values for this metadata field will be contained in an array.",
          "Values": null
        }, 
        {
          "Name": "IsReadOnly",
          "Type": "int",
          "Desc": "Flag indicating whether this metadata item is read-only",
          "Values": null
        }, 
        {
          "Name": "IsUserDefined",
          "Type": "int",
          "Desc": "Flag indicating whether this metadata item is user-defined, or pre-defined by the application",
          "Values": null
        }, 
        {
          "Name": "Properties",
          "Type": "struct",
          "Desc": "Properties associated with this metadata field",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "MetadataProperty",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Key",
          "Type": "string",
          "Desc": "Key used to identify metadata item property",
          "Values": null
        }, 
        {
          "Name": "Name",
          "Type": "string",
          "Desc": "User-visible name for metadata property",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "MultiPasteProgress",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Status",
          "Type": "string",
          "Desc": null,
          "Values": null
        }, 
        {
          "Name": "Summary",
          "Type": "string",
          "Desc": "String summarising the progress information",
          "Values": null
        }, 
        {
          "Name": "ShotID",
          "Type": "int",
          "Desc": "Shot ID that this progress information relates to",
          "Values": null
        }, 
        {
          "Name": "Frame",
          "Type": "int",
          "Desc": "Frame number within timeline",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "MultiPasteSettings",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Source",
          "Type": "int",
          "Desc": "Specify source of grade or metadata for Multi-Paste.",
          "Values": null
        }, 
        {
          "Name": "SourceScenes",
          "Type": "array",
          "Desc": "Specify list of database scene names to use as source of grades and metadata. Applicable when \"Source\" is set to MULTIPASTE_SOURCE_MULTIPLESCENES.",
          "Values": null
        }, 
        {
          "Name": "SourceDirectory",
          "Type": "string",
          "Desc": "Specify directory to search for grades or metadata. Applicable when \"Source\" is set to MULTIPASTE_SOURCE_BLG.",
          "Values": null
        }, 
        {
          "Name": "SourceEDL",
          "Type": "string",
          "Desc": "Specify EDL filename to read metadata from. Applicable when \"Source\" is set to MULTIPASTE_SOURCE_EDL.",
          "Values": null
        }, 
        {
          "Name": "EDLApplyASCCDL",
          "Type": "int",
          "Desc": "Whether or not to apply any CDL values found in the EDL. Applicable when \"Source\" is set to MULTIPASTE_SOURCE_EDL.",
          "Values": null
        }, 
        {
          "Name": "ASCCDLLayerNumber",
          "Type": "int",
          "Desc": "Layer number for CDL grade layers added when multi-pasting from an EDL. Applicable when \"Source\" is set to MULTIPASTE_SOURCE_EDL.",
          "Values": null
        }, 
        {
          "Name": "ASCCDLColour",
          "Type": "array",
          "Desc": "Array of RGBA values",
          "Values": null
        }, 
        {
          "Name": "ASCCDLCategories",
          "Type": "set",
          "Desc": "Categories assigned to CDL grade layers added when multi-pasting from an EDL. Applicable when \"Source\" is set to MULTIPASTE_SOURCE_EDL.",
          "Values": null
        }, 
        {
          "Name": "BLGResourceConflict",
          "Type": "int",
          "Desc": "Conflict resolution algorithm used when resources imported when multi-pasting from BLG files conflict with existing resources. Applicable when \"Source\" is set to MULTIPASTE_SOURCE_BLG.",
          "Values": null
        }, 
        {
          "Name": "DestSelection",
          "Type": "int",
          "Desc": "Destination",
          "Values": null
        }, 
        {
          "Name": "LUTDirectory",
          "Type": "string",
          "Desc": "Specify directory to search for LUT files. Applicable when \"Source\" is set to MULTIPASTE_SOURCE_LUT.",
          "Values": null
        }, 
        {
          "Name": "LUTLayerNum",
          "Type": "int",
          "Desc": "Layer number for Truelight layers added when multi-pasting LUTs. Applicable when \"Source\" is set to MULTIPASTE_SOURCE_LUT.",
          "Values": null
        }, 
        {
          "Name": "LUTLayerColour",
          "Type": "array",
          "Desc": "Array of RGBA values",
          "Values": null
        }, 
        {
          "Name": "LUTCategories",
          "Type": "set",
          "Desc": "Categories assigned to Truelight layers added when multi-pasting from LUTs. Applicable when \"Source\" is set to MULTIPASTE_SOURCE_LUT.",
          "Values": null
        }, 
        {
          "Name": "CDLDirectory",
          "Type": "string",
          "Desc": "Specify directory to search for CDL/CCC files. Applicable when \"Source\" is set to MULTIPASTE_SOURCE_CDL.",
          "Values": null
        }, 
        {
          "Name": "CDLLayerNum",
          "Type": "int",
          "Desc": "Strip colour of CDL grade layers added when multi-pasting CDL/CCC files. Applicable when \"Source\" is set to MULTIPASTE_SOURCE_CDL.",
          "Values": null
        }, 
        {
          "Name": "CDLLayerColour",
          "Type": "array",
          "Desc": "Array of RGBA values",
          "Values": null
        }, 
        {
          "Name": "CDLCategories",
          "Type": "set",
          "Desc": "Categories assigned to CDL grade layers added when multi-pasting from CDL/CCC files. Applicable when \"Source\" is set to MULTIPASTE_SOURCE_CDL.",
          "Values": null
        }, 
        {
          "Name": "MatchBy",
          "Type": "array",
          "Desc": "Array of sort criteria",
          "Values": null
        }, 
        {
          "Name": "MatchQuality",
          "Type": "int",
          "Desc": "Whether or not metadata needs to match exactly, or if a \"fuzzy\" match is permissible.",
          "Values": null
        }, 
        {
          "Name": "PasteGrades",
          "Type": "int",
          "Desc": "Whether or not any grade stacks found in the source data are to be pasted., flag indicating true or false",
          "Values": null
        }, 
        {
          "Name": "LayerZeroBehaviour",
          "Type": "int",
          "Desc": "If \"PasteGrades\" is 1, specifies what exactly which parts of the grade stack should be copied.",
          "Values": null
        }, 
        {
          "Name": "LayerZeroOverwrite",
          "Type": "int",
          "Desc": "If \"LayerZeroBehaviour\" is MULTIPASTE_LAYERZEROBEHAVIOUR_LAYERZEROANDSTACK or MULTIPASTE_LAYERZEROBEHAVIOUR_LAYERZEROONLY, how copied layer 0 operators should be merged with the existing operators., flag indicating true or false",
          "Values": null
        }, 
        {
          "Name": "LayerZeroAudio",
          "Type": "int",
          "Desc": "Whether or not Audio Sequence operator is pasted into the destination scene., flag indicating true or false",
          "Values": null
        }, 
        {
          "Name": "InputColourSpace",
          "Type": "int",
          "Desc": "If layer 0 is be copied, whether or not to copy the input colour space in layer 0's Sequence operator., flag indicating true or false",
          "Values": null
        }, 
        {
          "Name": "SourceShots",
          "Type": "int",
          "Desc": "Whether or not to narrow down the source layers to be copied based on category.",
          "Values": null
        }, 
        {
          "Name": "SourceShotCategories",
          "Type": "set",
          "Desc": "Specifies a set of categories. Only applicable if \"SourceShots\" is MULTIPASTE_SOURCESHOTS_COPYALLEXCEPTCATS  or MULTIPASTE_SOURCESHOTS_COPYONLYCATS.",
          "Values": null
        }, 
        {
          "Name": "DestShots",
          "Type": "int",
          "Desc": "Whether or not to specify the destination layers to be overwritten or retained based on category.",
          "Values": null
        }, 
        {
          "Name": "DestShotCategories",
          "Type": "set",
          "Desc": "Specifies a set of categories. Only applicaable if \"DestShots\" is MULTIPASTE_DESTSHOTS_OVERWRITEALLEXCEPTCATS  or MULTIPASTE_DESTSHOTS_RETAINALLEXCEPTCAT.",
          "Values": null
        }, 
        {
          "Name": "DetectGradeChanges",
          "Type": "int",
          "Desc": "Whether or not to mark shots whose grade has changed as a result of the multi-paste with a category., flag indicating true or false",
          "Values": null
        }, 
        {
          "Name": "GradeChangedCategory",
          "Type": "string",
          "Desc": "A category to be applied to shots whose grade has changed. Only applicable if \"DetectGradeChanges\" is 1.",
          "Values": null
        }, 
        {
          "Name": "ClearUnchangedGrades",
          "Type": "int",
          "Desc": "Whether or not to remove the category specified by \"GradeChangedCategory\" if a shot's grade is not changed by the multi-paste. Only applicable if \"DetectGradeChanges\" is 1., flag indicating true or false",
          "Values": null
        }, 
        {
          "Name": "PasteLocation",
          "Type": "int",
          "Desc": "Where strips pasted are to be located.",
          "Values": null
        }, 
        {
          "Name": "LayerZeroCategories",
          "Type": "int",
          "Desc": "Whether or not layer 0 categories are to be pasted.",
          "Values": null
        }, 
        {
          "Name": "LayerZeroExcludeCategories",
          "Type": "set",
          "Desc": "A set of categories. Only applicable if \"LayerZeroCategories\" is MULTIPASTE_LAYERZEROCATEGORIES_INCLUDE or MULTIPASTE_LAYERZEROCATEGORIES_OVERWRITE, in which case the set is used to further narrow down the categories copied.",
          "Values": null
        }, 
        {
          "Name": "PasteMetadata",
          "Type": "int",
          "Desc": "Whether not metadata columns are to be pasted., flag indicating true or false",
          "Values": null
        }, 
        {
          "Name": "MetadataColumns",
          "Type": "set",
          "Desc": "Set containing names of metadata columns to be pasted.Only applicable if \"PasteMetadata\" is 1.",
          "Values": null
        }, 
        {
          "Name": "AddExtraMetadata",
          "Type": "int",
          "Desc": "Whether or not metadata columns which exist in the source data but not in the destination scene should be pasted. Only applicable if \"PasteMetadata\" is 1., flag indicating true or false",
          "Values": null
        }, 
        {
          "Name": "OverwriteMetadata",
          "Type": "int",
          "Desc": "Whether or not existing metadata in the destination scene is allowed to be overwritten. Only applicable if \"PasteMetadata\" is 1., flag indicating true or false",
          "Values": null
        }, 
        {
          "Name": "PasteGroups",
          "Type": "int",
          "Desc": "Whether or not groups are to be pasted., flag indicating true or false",
          "Values": null
        }, 
        {
          "Name": "ShredComps",
          "Type": "int",
          "Desc": "Shred Composites Into Separate Shots, flag indicating true or false",
          "Values": null
        }, 
        {
          "Name": "ShredProtectCategories",
          "Type": "set",
          "Desc": "Value for ShredProtectCategories",
          "Values": null
        }, 
        {
          "Name": "ShredExternalMattes",
          "Type": "int",
          "Desc": "Treat External Mattes As Individual Shots, flag indicating true or false",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "NewSceneOptions",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "format",
          "Type": "string",
          "Desc": "Working format of scene. Can be omitted if using a template.",
          "Values": null
        }, 
        {
          "Name": "colourspace",
          "Type": "string",
          "Desc": "Working colour space of scene. Can be omitted if using a template.",
          "Values": null
        }, 
        {
          "Name": "frame_rate",
          "Type": "float",
          "Desc": "Working frame rate of scene. Can be omitted if using a template.",
          "Values": null
        }, 
        {
          "Name": "field_order",
          "Type": "string",
          "Desc": "Working field order of scene",
          "Values": null
        }, 
        {
          "Name": "template",
          "Type": "ScenePath",
          "Desc": "Path of template scene from which to copy settings",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "OpenSceneStatus",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Done",
          "Type": "int",
          "Desc": "Flag indicating whether scene open is complete",
          "Values": null
        }, 
        {
          "Name": "Error",
          "Type": "string",
          "Desc": "Error message if scene open failed",
          "Values": null
        }, 
        {
          "Name": "Progress",
          "Type": "float",
          "Desc": "Percentage completion",
          "Values": null
        }, 
        {
          "Name": "Message",
          "Type": "string",
          "Desc": "Description of current status",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "QueueLogItem",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Time",
          "Type": "string",
          "Desc": "Time of log item",
          "Values": null
        }, 
        {
          "Name": "Type",
          "Type": "string",
          "Desc": "Type of log item",
          "Values": null
        }, 
        {
          "Name": "Task",
          "Type": "string",
          "Desc": "Task",
          "Values": null
        }, 
        {
          "Name": "Frame",
          "Type": "int",
          "Desc": "Frame Number of log item",
          "Values": null
        }, 
        {
          "Name": "Message",
          "Type": "string",
          "Desc": "Log message text",
          "Values": null
        }, 
        {
          "Name": "Detail",
          "Type": "string",
          "Desc": "Log message detail",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "QueueOp",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "ID",
          "Type": "int",
          "Desc": "Operation ID",
          "Values": null
        }, 
        {
          "Name": "Description",
          "Type": "string",
          "Desc": "Description of operation",
          "Values": null
        }, 
        {
          "Name": "SubmitUser",
          "Type": "string",
          "Desc": "Name of user that submitted operation",
          "Values": null
        }, 
        {
          "Name": "SubmitHost",
          "Type": "string",
          "Desc": "Name of host that submitted operation",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "QueueOpStatus",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "ID",
          "Type": "int",
          "Desc": "Operation ID",
          "Values": null
        }, 
        {
          "Name": "Status",
          "Type": "string",
          "Desc": "Status of operation",
          "Values": null
        }, 
        {
          "Name": "Progress",
          "Type": "float",
          "Desc": "Progress of operation",
          "Values": null
        }, 
        {
          "Name": "ProgressText",
          "Type": "string",
          "Desc": "Message describing current progress of operation",
          "Values": null
        }, 
        {
          "Name": "TimeElapsed",
          "Type": "string",
          "Desc": "Time elapsed so far, in seconds",
          "Values": null
        }, 
        {
          "Name": "TimeRemaining",
          "Type": "string",
          "Desc": "Estimated time remaining, in seconds",
          "Values": null
        }, 
        {
          "Name": "Warnings",
          "Type": "int",
          "Desc": "Number of warnings encountered",
          "Values": null
        }, 
        {
          "Name": "Errors",
          "Type": "int",
          "Desc": "Number of errors encountered",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "RenderCodecInfo",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Key",
          "Type": "string",
          "Desc": "Key identifying this codec",
          "Values": null
        }, 
        {
          "Name": "Text",
          "Type": "string",
          "Desc": "User-readable name for codec",
          "Values": null
        }, 
        {
          "Name": "Params",
          "Type": "array",
          "Desc": "Array of supported parameters",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "RenderCodecParameterInfo",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Key",
          "Type": "string",
          "Desc": "Key used to identify this parameter",
          "Values": null
        }, 
        {
          "Name": "Text",
          "Type": "string",
          "Desc": "User-readable name for parameter",
          "Values": null
        }, 
        {
          "Name": "Type",
          "Type": "string",
          "Desc": "Data type of parameter",
          "Values": null
        }, 
        {
          "Name": "Choices",
          "Type": "array",
          "Desc": "Array of valid values for this parameter",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "RenderCodecParameterValue",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Key",
          "Type": "string",
          "Desc": "Key used to identify this parameter value",
          "Values": null
        }, 
        {
          "Name": "Text",
          "Type": "string",
          "Desc": "User-readable name for parameter value",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "RenderDeliverable",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Name",
          "Type": "string",
          "Desc": "Name of deliverable",
          "Values": null
        }, 
        {
          "Name": "Disabled",
          "Type": "int",
          "Desc": "Flag indicating whether this deliverable is disabled for rendering",
          "Values": null
        }, 
        {
          "Name": "IsMovie",
          "Type": "int",
          "Desc": "Flag indicating that this deliverable is a movie",
          "Values": null
        }, 
        {
          "Name": "FileType",
          "Type": "string",
          "Desc": "Key specifying image or movie file type. The list of supported file types can be found by calling RenderSetup.get_image_types() and RenderSetup.get_movie_types().",
          "Values": null
        }, 
        {
          "Name": "MovieCodec",
          "Type": "string",
          "Desc": "Key identifying video codec for movie file types. The list of supported codecs can be found by calling RenderSetup.get_movie_codecs().",
          "Values": null
        }, 
        {
          "Name": "AudioCodec",
          "Type": "string",
          "Desc": "Key identifying audio codec for movie file types. The list of supported codecs can be found by calling RenderSetup.get_movie_audio_codecs().",
          "Values": null
        }, 
        {
          "Name": "ImageOptions",
          "Type": "struct",
          "Desc": "Dictionary containing image codec parameters and their values",
          "Values": null
        }, 
        {
          "Name": "AudioSampleRate",
          "Type": "int",
          "Desc": "Audio Sample Rate in Hertz",
          "Values": null
        }, 
        {
          "Name": "AudioNumChannels",
          "Type": "int",
          "Desc": "Number of audio channels in deliverable. Use -1 to take use same number as source movie/audio.",
          "Values": null
        }, 
        {
          "Name": "Container",
          "Type": "string",
          "Desc": "Destination Container path. If unset, RenderSetup will use the default container from the Scene.",
          "Values": null
        }, 
        {
          "Name": "OutputDirectory",
          "Type": "string",
          "Desc": "Output directory relative to container",
          "Values": null
        }, 
        {
          "Name": "FileNamePrefix",
          "Type": "string",
          "Desc": "File name prefix (before frame number component)",
          "Values": null
        }, 
        {
          "Name": "FileNamePostfix",
          "Type": "string",
          "Desc": "File name postfix (after frame number component). Only used for Sequence renders.",
          "Values": null
        }, 
        {
          "Name": "FileNameNumDigits",
          "Type": "int",
          "Desc": "Number of digits to pad frame number to. Only used for Sequence renders.",
          "Values": null
        }, 
        {
          "Name": "FileNameNumber",
          "Type": "string",
          "Desc": "Source for frame number",
          "Values": null
        }, 
        {
          "Name": "FileNameExtension",
          "Type": "string",
          "Desc": "File extension. If not specified, the default exxtension for the specified file type will be used.",
          "Values": null
        }, 
        {
          "Name": "ColourSpaceTag",
          "Type": "int",
          "Desc": "Colour space tag data (NCLC) to embed in QuickTime movies",
          "Values": null
        }, 
        {
          "Name": "RenderFormat",
          "Type": "string",
          "Desc": "Name of image format for rendered output. Set this to RENDER_FORMAT_USEINPUT to use the Input Format of each shot as its Render Rormat.",
          "Values": null
        }, 
        {
          "Name": "RenderResolution",
          "Type": "string",
          "Desc": "Render format resolution",
          "Values": null
        }, 
        {
          "Name": "RenderFrameRate",
          "Type": "float",
          "Desc": "Render frame rate",
          "Values": null
        }, 
        {
          "Name": "RenderFieldOrder",
          "Type": "string",
          "Desc": "Field behaviour",
          "Values": null
        }, 
        {
          "Name": "RenderDecodeQuality",
          "Type": "string",
          "Desc": "Source codec decode quality",
          "Values": null
        }, 
        {
          "Name": "RenderColourSpace",
          "Type": "string",
          "Desc": "Name of colour space for rendered output. ",
          "Values": null
        }, 
        {
          "Name": "RenderVideoLUT",
          "Type": "string",
          "Desc": "Video scaling LUT",
          "Values": null
        }, 
        {
          "Name": "RenderLayer",
          "Type": "int",
          "Desc": "Layers to include rendered output",
          "Values": null
        }, 
        {
          "Name": "RenderTrack",
          "Type": "int",
          "Desc": "Track number to render. Bottom most track is track 0",
          "Values": null
        }, 
        {
          "Name": "RenderMask",
          "Type": "string",
          "Desc": "Name of Mask within Render Format to apply to rendered image",
          "Values": null
        }, 
        {
          "Name": "RenderMaskMode",
          "Type": "int",
          "Desc": "Mask value to apply in masked area",
          "Values": null
        }, 
        {
          "Name": "RenderBurnin",
          "Type": "string",
          "Desc": "Name of Burnin to apply to rendered image",
          "Values": null
        }, 
        {
          "Name": "RenderFlashBurnin",
          "Type": "int",
          "Desc": "Number of frames to flash burnin at start of shot. Set to 0 to apply burnin to whole of each shot.",
          "Values": null
        }, 
        {
          "Name": "RenderDisableCache",
          "Type": "int",
          "Desc": "Do not read disk cache when rendering. This will ignore any intermediate strip caching and re-render all data.",
          "Values": null
        }, 
        {
          "Name": "HandleIncompleteStacks",
          "Type": "string",
          "Desc": "Action to take when encountering a stack with missing strips",
          "Values": null
        }, 
        {
          "Name": "HandleEmptyFrames",
          "Type": "string",
          "Desc": "Action to take when encountering frames in timeline with no strips/shots",
          "Values": null
        }, 
        {
          "Name": "HandleError",
          "Type": "string",
          "Desc": "Action to take when encountering frames in timeline with no strips/shots",
          "Values": null
        }, 
        {
          "Name": "EmbedTimecode",
          "Type": "int",
          "Desc": "Which timecode to embed into rendered output",
          "Values": null
        }, 
        {
          "Name": "EmbedTape",
          "Type": "int",
          "Desc": "Which tape name to embed into rendered output",
          "Values": null
        }, 
        {
          "Name": "EmbedClip",
          "Type": "int",
          "Desc": "Which clip name to embed into rendered output",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "RenderFileTypeInfo",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Key",
          "Type": "string",
          "Desc": "Key identifying this file type",
          "Values": null
        }, 
        {
          "Name": "Text",
          "Type": "string",
          "Desc": "User-readable name for file type",
          "Values": null
        }, 
        {
          "Name": "Extensions",
          "Type": "array",
          "Desc": "Array of support file extensions",
          "Values": null
        }, 
        {
          "Name": "Params",
          "Type": "array",
          "Desc": "Array of supported parameters",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "RenderOpInfo",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "ID",
          "Type": "int",
          "Desc": "Queue operation ID",
          "Values": null
        }, 
        {
          "Name": "Warning",
          "Type": "string",
          "Desc": "Any warning that was raised during the submission of the render operation",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "RenderProcessorLogItem",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Time",
          "Type": "string",
          "Desc": "Time of log item",
          "Values": null
        }, 
        {
          "Name": "Type",
          "Type": "string",
          "Desc": "Type of log item",
          "Values": null
        }, 
        {
          "Name": "Task",
          "Type": "string",
          "Desc": "Task",
          "Values": null
        }, 
        {
          "Name": "Frame",
          "Type": "int",
          "Desc": "Frame Number of log item",
          "Values": null
        }, 
        {
          "Name": "Message",
          "Type": "string",
          "Desc": "Log message text",
          "Values": null
        }, 
        {
          "Name": "Detail",
          "Type": "string",
          "Desc": "Log message detail",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "RenderStatus",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Status",
          "Type": "string",
          "Desc": "Status of render operation",
          "Values": null
        }, 
        {
          "Name": "Error",
          "Type": "string",
          "Desc": "Error message if render failed",
          "Values": null
        }, 
        {
          "Name": "Total",
          "Type": "int",
          "Desc": "Total frames to render",
          "Values": null
        }, 
        {
          "Name": "Complete",
          "Type": "int",
          "Desc": "Number of frames completed",
          "Values": null
        }, 
        {
          "Name": "Remaining",
          "Type": "int",
          "Desc": "Number of frames remaining",
          "Values": null
        }, 
        {
          "Name": "Failed",
          "Type": "int",
          "Desc": "Number of frames that failed to render",
          "Values": null
        }, 
        {
          "Name": "Progress",
          "Type": "float",
          "Desc": "Operation progress (0.0 to 1.0)",
          "Values": null
        }, 
        {
          "Name": "ProgressMessage",
          "Type": "string",
          "Desc": "Last progress update message",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "SceneInfo",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "CreatedDate",
          "Type": "string",
          "Desc": "Time and Date that scene was created",
          "Values": null
        }, 
        {
          "Name": "CreatedBy",
          "Type": "string",
          "Desc": "Username and hostname that created scene",
          "Values": null
        }, 
        {
          "Name": "CreatedVersion",
          "Type": "string",
          "Desc": "Version of software that created this scene",
          "Values": null
        }, 
        {
          "Name": "OpenedDate",
          "Type": "string",
          "Desc": "Time and Date that scene was opened",
          "Values": null
        }, 
        {
          "Name": "OpenedBy",
          "Type": "string",
          "Desc": "Username and hostname that opened the scene",
          "Values": null
        }, 
        {
          "Name": "OpenedVersion",
          "Type": "string",
          "Desc": "Version of software that opened this scene ",
          "Values": null
        }, 
        {
          "Name": "ModifiedDate",
          "Type": "string",
          "Desc": "Time and Date that scene was last modified",
          "Values": null
        }, 
        {
          "Name": "ModifiedBy",
          "Type": "string",
          "Desc": "Username and hostname that last modified the scene",
          "Values": null
        }, 
        {
          "Name": "ModifiedVersion",
          "Type": "string",
          "Desc": "Username and hostname that last modified the scene",
          "Values": null
        }, 
        {
          "Name": "WorkingFormat",
          "Type": "string",
          "Desc": "Name of working format",
          "Values": null
        }, 
        {
          "Name": "Notes",
          "Type": "string",
          "Desc": "Any notes associated with this scene",
          "Values": null
        }, 
        {
          "Name": "LastEDL",
          "Type": "string",
          "Desc": "Name of the last EDL imported into this scene",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "ScenePath",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Type",
          "Type": "string",
          "Desc": "Type of path this is. Can be 'psql' for a scene stored in a database, or 'file' for scene stored in a file",
          "Values": null
        }, 
        {
          "Name": "Host",
          "Type": "string",
          "Desc": "Hostname of machine with job database",
          "Values": null
        }, 
        {
          "Name": "Job",
          "Type": "string",
          "Desc": "Job name",
          "Values": null
        }, 
        {
          "Name": "Scene",
          "Type": "string",
          "Desc": "Scene name",
          "Values": null
        }, 
        {
          "Name": "Tag",
          "Type": "string",
          "Desc": "Branch/tag name",
          "Values": null
        }, 
        {
          "Name": "Filename",
          "Type": "string",
          "Desc": "Filename",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "SceneSettingDefinition",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Type",
          "Type": "string",
          "Desc": "Data type of parameter",
          "Values": null
        }, 
        {
          "Name": "Desc",
          "Type": "string",
          "Desc": "Description of parameter",
          "Values": null
        }, 
        {
          "Name": "Values",
          "Type": "array",
          "Desc": "If present, this specifies the set of valid values for this key",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "ShotIndexRange",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "FirstIndex",
          "Type": "int",
          "Desc": "Index of first shot that intersects the range",
          "Values": null
        }, 
        {
          "Name": "LastIndex",
          "Type": "int",
          "Desc": "Index of last shot that intersects the range",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "ShotInfo",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "ShotId",
          "Type": "int",
          "Desc": "shot idenfifier",
          "Values": null
        }, 
        {
          "Name": "StartFrame",
          "Type": "int",
          "Desc": "The shot's timeline start frame",
          "Values": null
        }, 
        {
          "Name": "EndFrame",
          "Type": "int",
          "Desc": "The shot's timeline end frame",
          "Values": null
        }, 
        {
          "Name": "PosterFrame",
          "Type": "int",
          "Desc": "The shot's timeline poster frame",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "StillExportSettings",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Source",
          "Type": "int",
          "Desc": "Export Stills for",
          "Values": null
        }, 
        {
          "Name": "Filter",
          "Type": "string",
          "Desc": "Tab/Filter",
          "Values": null
        }, 
        {
          "Name": "Category",
          "Type": "set",
          "Desc": "Category",
          "Values": null
        }, 
        {
          "Name": "CategoryMatch",
          "Type": "int",
          "Desc": "Shots Must Match",
          "Values": null
        }, 
        {
          "Name": "Frames",
          "Type": "int",
          "Desc": "Frames",
          "Values": null
        }, 
        {
          "Name": "MarkCategory",
          "Type": "set",
          "Desc": "Mark Category",
          "Values": null
        }, 
        {
          "Name": "Stereo",
          "Type": "int",
          "Desc": "Stereo",
          "Values": null
        }, 
        {
          "Name": "Directory",
          "Type": "string",
          "Desc": "Export Directory",
          "Values": null
        }, 
        {
          "Name": "Overwrite",
          "Type": "int",
          "Desc": "Existing Stills",
          "Values": null
        }, 
        {
          "Name": "FileType",
          "Type": "int",
          "Desc": "File Type",
          "Values": null
        }, 
        {
          "Name": "ImageOptions",
          "Type": "string",
          "Desc": "",
          "Values": null
        }, 
        {
          "Name": "Path",
          "Type": "string",
          "Desc": "",
          "Values": null
        }, 
        {
          "Name": "Filename",
          "Type": "string",
          "Desc": "Filename",
          "Values": null
        }, 
        {
          "Name": "ColourSpace",
          "Type": "string",
          "Desc": "Colour Space",
          "Values": null
        }, 
        {
          "Name": "Format",
          "Type": "int",
          "Desc": "Format",
          "Values": null
        }, 
        {
          "Name": "Resolution",
          "Type": "int",
          "Desc": "Resolution",
          "Values": null
        }, 
        {
          "Name": "DecodeQuality",
          "Type": "int",
          "Desc": "Quality",
          "Values": null
        }, 
        {
          "Name": "Mask",
          "Type": "int",
          "Desc": "Mask",
          "Values": null
        }, 
        {
          "Name": "MaskMode",
          "Type": "int",
          "Desc": "Value for MaskMode",
          "Values": null
        }, 
        {
          "Name": "Burnin",
          "Type": "int",
          "Desc": "Burnin",
          "Values": null
        }, 
        {
          "Name": "Truelight",
          "Type": "int",
          "Desc": "Truelight",
          "Values": null
        }
      ]
    }, 
    {
      "Name": "VolumeInfo",
      "Desc": null,
      "Fields": [ 
        {
          "Name": "Key",
          "Type": "string",
          "Desc": "Key identifying this volume",
          "Values": null
        }, 
        {
          "Name": "Name",
          "Type": "string",
          "Desc": "Volume name",
          "Values": null
        }, 
        {
          "Name": "Label",
          "Type": "string",
          "Desc": "Volume label",
          "Values": null
        }, 
        {
          "Name": "Zone",
          "Type": "string",
          "Desc": "Zone containing Volume",
          "Values": null
        }, 
        {
          "Name": "Path",
          "Type": "string",
          "Desc": "Local path to volume",
          "Values": null
        }
      ]
    }
  ]
}